<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JFramework.Core</name>
    </assembly>
    <members>
        <member name="T:JFramework.Core.Cache.BaseConfig">
            <summary>
            基础配置项,包括站点所在相对路径
            </summary>
        </member>
        <member name="P:JFramework.Core.Cache.BaseConfig.GetPath">
            <summary>
            获取站点根目录信息
            </summary>
        </member>
        <member name="T:JFramework.Core.Cache.DefaultCacheStrategy">
            <summary>
            默认缓存管理类
            </summary>
        </member>
        <member name="F:JFramework.Core.Cache.DefaultCacheStrategy._timeOut">
            <summary>
            默认缓存存活期为600秒(10分钟)
            </summary>
        </member>
        <member name="F:JFramework.Core.Cache.DefaultCacheStrategy.instance">
            <summary>
            缓存策略
            </summary>
        </member>
        <member name="F:JFramework.Core.Cache.DefaultCacheStrategy.syncObj">
            <summary>
            线程同步锁
            </summary>
        </member>
        <member name="F:JFramework.Core.Cache.DefaultCacheStrategy.webCache">
            <summary>
            获取HTTP缓存对象
            </summary>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultCacheStrategy.AddObject(System.String,System.Object)">
            <summary>
            加入当前对象到缓存中
            </summary>
            <param name="keyName">对象的键值</param>
            <param name="o">缓存的对象</param>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultCacheStrategy.AddObject(System.Int32,System.String,System.Object)">
            <summary>
            加入当前对象到缓存中
            </summary>
            <param name="hashCode">用户指定的hashCode，如该值被指定，则使用该值而不是缓存键进行Hashing计算,但在本类中该值无效</param>
            <param name="keyName">对象的键值</param>
            <param name="o">缓存的对象</param>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultCacheStrategy.AddObject(System.String,System.Object,System.Boolean)">
            <summary>
            加入当前对象到缓存中
            </summary>
            <param name="keyName">对象的键值</param>
            <param name="o">缓存的对象</param>
            <param name="saved">是否持久化保存</param>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultCacheStrategy.AddObject(System.String,System.Object,System.Int32)">
            <summary>
            加入当前对象到缓存中
            </summary>
            <param name="keyName">对象的键值</param>
            <param name="o">缓存的对象</param>
            <param name="expires">过期时间,单位:秒</param>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultCacheStrategy.AddObject(System.Int32,System.String,System.Object,System.Boolean)">
            <summary>
            加入当前对象到缓存中
            </summary>
            <param name="hashCode">用户指定的hashCode，如该值被指定，则使用该值而不是缓存键进行Hashing计算,但在本类中该值无效</param>
            <param name="keyName">对象的键值</param>
            <param name="o">缓存的对象</param>
            <param name="saved"></param>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultCacheStrategy.AddObject(System.String,System.Object,System.Int32,System.Boolean)">
            <summary>
            加入当前对象到缓存中
            </summary>
            <param name="keyName">对象的键值</param>
            <param name="o">缓存的对象</param>
            <param name="expires">过期时间,单位:秒</param>
            <param name="saved">是否持久化保存</param>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultCacheStrategy.ExistHashValue(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="keyName"></param>
            <param name="hashKey"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultCacheStrategy.ExitsKey(System.String)">
            <summary>
            key是否存在
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultCacheStrategy.FlushAll">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultCacheStrategy.GetHashValue(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="keyName"></param>
            <param name="hashKey"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultCacheStrategy.GetValue``1(System.String)">
            <summary>
            获取key对应的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultCacheStrategy.KeySize">
            <summary>
            返回当前数据库的key数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultCacheStrategy.onRemove(System.String,System.Object,System.Web.Caching.CacheItemRemovedReason)">
            <summary>
            建立回调委托的一个实例
            </summary>
            <param name="key">对象的键值</param>
            <param name="val">缓存的对象</param>
            <param name="reason">缓存失效原因</param>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultCacheStrategy.ReadObject(System.String)">
            <summary>
            返回一个指定的对象
            </summary>
            <param name="keyName">对象的关键字</param>
            <returns>获取缓存的对象</returns>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultCacheStrategy.RemoveKey(System.String)">
            <summary>
            删除KEY
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultCacheStrategy.RemoveKeys(System.String[])">
            <summary>
            删除多个KEY
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultCacheStrategy.SetKeyExpire(System.String,System.Int32)">
            <summary>
            为key指定过期时间，单位是秒
            </summary>
            <param name="keyName"></param>
            <param name="second">到期时间:秒</param>
            <returns>true 成功, false 已经设置过过期时间或者不存在</returns>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultCacheStrategy.SetValue``1(System.String,``0)">
            <summary>
            设置key对应的值为实体类型的value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyName"></param>
            <param name="keyValue"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultCacheStrategy.SetValue``1(System.String,``0,System.Int32)">
            <summary>
            设置key对应的值为实体类型的value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyName"></param>
            <param name="keyValue"></param>
            <param name="second">到期时间:秒</param>
            <returns></returns>
        </member>
        <member name="P:JFramework.Core.Cache.DefaultCacheStrategy.GetWebCacheObj">
            <summary>
            获取HTTP缓存对象
            </summary>
        </member>
        <member name="P:JFramework.Core.Cache.DefaultCacheStrategy.TimeOut">
            <summary>
            设置到期相对时间[单位: 秒] 
            </summary>
        </member>
        <member name="T:JFramework.Core.Cache.DefaultConfigFileManager">
            <summary>
            文件配置管理基类
            </summary>
        </member>
        <member name="F:JFramework.Core.Cache.DefaultConfigFileManager.m_configfilepath">
            <summary>
            文件所在路径变量
            </summary>
        </member>
        <member name="F:JFramework.Core.Cache.DefaultConfigFileManager.m_configinfo">
            <summary>
            临时配置对象变量
            </summary>
        </member>
        <member name="F:JFramework.Core.Cache.DefaultConfigFileManager.m_lockHelper">
            <summary>
            锁对象
            </summary>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultConfigFileManager.DeserializeInfo(System.String,System.Type)">
            <summary>
            反序列化指定的类
            </summary>
            <param name="configfilepath">config 文件的路径</param>
            <param name="configtype">相应的类型</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultConfigFileManager.LoadConfig(System.DateTime@,System.String,JFramework.Core.Cache.IConfig)">
            <summary>
            加载(反序列化)指定对象类型的配置对象
            </summary>
            <param name="fileoldchange">文件加载时间</param>
            <param name="configFilePath">配置文件所在路径</param>
            <param name="configinfo">相应的变量 注:该参数主要用于设置m_configinfo变量 和 获取类型.GetType()</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultConfigFileManager.LoadConfig(System.DateTime@,System.String,JFramework.Core.Cache.IConfig,System.Boolean)">
            <summary>
            加载(反序列化)指定对象类型的配置对象
            </summary>
            <param name="fileoldchange">文件加载时间</param>
            <param name="configFilePath">配置文件所在路径(包括文件名)</param>
            <param name="configinfo">相应的变量 注:该参数主要用于设置m_configinfo变量 和 获取类型.GetType()</param>
            <param name="checkTime">是否检查并更新传递进来的"文件加载时间"变量</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultConfigFileManager.SaveConfig">
            <summary>
            保存配置实例(虚方法需继承)
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.DefaultConfigFileManager.SaveConfig(System.String,JFramework.Core.Cache.IConfig)">
            <summary>
            保存(序列化)指定路径下的配置文件
            </summary>
            <param name="configFilePath">指定的配置文件所在的路径(包括文件名)</param>
            <param name="configinfo">被保存(序列化)的对象</param>
            <returns></returns>
        </member>
        <member name="P:JFramework.Core.Cache.DefaultConfigFileManager.ConfigFilePath">
            <summary>
            文件所在路径
            </summary>
        </member>
        <member name="P:JFramework.Core.Cache.DefaultConfigFileManager.ConfigInfo">
            <summary>
            临时配置对象
            </summary>
        </member>
        <member name="T:JFramework.Core.Cache.ICacheStrategy">
            <summary>
            公共缓存策略接口
            </summary>
        </member>
        <member name="M:JFramework.Core.Cache.ICacheStrategy.AddObject(System.String,System.Object)">
            <summary>
            添加指定ID的对象
            </summary>
            <param name="objId">对象的键值</param>
            <param name="o">缓存的对象</param>
        </member>
        <member name="M:JFramework.Core.Cache.ICacheStrategy.AddObject(System.Int32,System.String,System.Object)">
            <summary>
            添加指定ID的对象
            </summary>
            <param name="hashCode">用户指定的hashCode，如该值被指定，则使用该值而不是缓存键进行Hashing计算</param>
            <param name="objId">对象的键值</param>
            <param name="o">缓存的对象</param>
        </member>
        <member name="M:JFramework.Core.Cache.ICacheStrategy.AddObject(System.String,System.Object,System.Boolean)">
            <summary>
            添加指定ID的对象
            </summary>
            <param name="objId">对象的键值</param>
            <param name="o">缓存的对象</param>
            <param name="saved">是否持久化保存</param>
        </member>
        <member name="M:JFramework.Core.Cache.ICacheStrategy.AddObject(System.String,System.Object,System.Int32)">
            <summary>
            添加指定ID的对象
            </summary>
            <param name="objId">对象的键值</param>
            <param name="o">缓存的对象</param>
            <param name="expires">过期时间,单位:秒</param>
        </member>
        <member name="M:JFramework.Core.Cache.ICacheStrategy.AddObject(System.Int32,System.String,System.Object,System.Boolean)">
            <summary>
            添加指定ID的对象
            </summary>
            <param name="hashCode">用户指定的hashCode，如该值被指定，则使用该值而不是缓存键进行Hashing计算</param>
            <param name="objId">对象的键值</param>
            <param name="o">缓存的对象</param>
            <param name="saved">是否持久化保存</param>
        </member>
        <member name="M:JFramework.Core.Cache.ICacheStrategy.AddObject(System.String,System.Object,System.Int32,System.Boolean)">
            <summary>
            添加指定ID的对象
            </summary>
            <param name="objId">对象的键值</param>
            <param name="o">缓存的对象</param>
            <param name="expires">过期时间,单位:秒</param>
            <param name="saved">是否持久化保存</param>
        </member>
        <member name="M:JFramework.Core.Cache.ICacheStrategy.ExistHashValue(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="keyName"></param>
            <param name="hashKey"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.ICacheStrategy.ExitsKey(System.String)">
            <summary>
            key是否存在
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.ICacheStrategy.FlushAll">
            <summary>
            清除
            </summary>
        </member>
        <member name="M:JFramework.Core.Cache.ICacheStrategy.GetHashValue(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="keyName"></param>
            <param name="hashKey"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.ICacheStrategy.GetHashValues(System.String)">
            <summary>
            
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.ICacheStrategy.GetValue``1(System.String)">
            <summary>
            获取key对应的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.ICacheStrategy.IncrementHashValue(System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="keyName"></param>
            <param name="hashKey"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.ICacheStrategy.IncrementValue(System.String)">
            <summary>
            
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.ICacheStrategy.KeySize">
            <summary>
            返回当前数据库的key数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.ICacheStrategy.ReadObject(System.String)">
            <summary>
            返回指定ID的对象
            </summary>
            <param name="objId">对象的键值</param>
            <returns>获取缓存的对象</returns>
        </member>
        <member name="M:JFramework.Core.Cache.ICacheStrategy.RemoveKey(System.String)">
            <summary>
            删除KEY
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.ICacheStrategy.RemoveKeys(System.String[])">
            <summary>
            删除多个KEY
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:JFramework.Core.Cache.ICacheStrategy.SetHashValue(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="keyName"></param>
            <param name="hashKey"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.ICacheStrategy.SetKeyExpire(System.String,System.Int32)">
            <summary>
            为key指定过期时间，单位是秒
            </summary>
            <param name="keyName"></param>
            <param name="second">到期时间:秒</param>
            <returns>true 成功, false 已经设置过过期时间或者不存在</returns>
        </member>
        <member name="M:JFramework.Core.Cache.ICacheStrategy.SetValue``1(System.String,``0)">
            <summary>
            设置key对应的值为实体类型的value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyName"></param>
            <param name="keyValue"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.ICacheStrategy.SetValue``1(System.String,``0,System.Int32)">
            <summary>
            设置key对应的值为实体类型的value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyName"></param>
            <param name="keyValue"></param>
            <param name="second">到期时间:秒</param>
            <returns></returns>
        </member>
        <member name="P:JFramework.Core.Cache.ICacheStrategy.TimeOut">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="T:JFramework.Core.Cache.Redis.RedisConfig">
            <summary>
            Redis配置信息
            </summary>
        </member>
        <member name="F:JFramework.Core.Cache.Redis.RedisConfig.m_configinfo">
            <summary>
            memcached配置文件信息类
            </summary>
        </member>
        <member name="F:JFramework.Core.Cache.Redis.RedisConfig.memCachedConfigTimer">
            <summary>
            间隔为10分钟,每10分钟检查一下memcached.config是否改动过，如改动，则重新配置本地memcached链接池对象
            </summary>
        </member>
        <member name="M:JFramework.Core.Cache.Redis.RedisConfig.GetConfig">
            <summary>
            获取配置类实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.Redis.RedisConfig.ResetConfig">
            <summary>
            重设配置类实例
            </summary>
        </member>
        <member name="M:JFramework.Core.Cache.Redis.RedisConfig.SaveConfig(JFramework.Core.Cache.Redis.RedisConfigEntity)">
            <summary>
            保存配置类实例
            </summary>
            <param name="configinfo">要保存的配置文件信息对象</param>
            <returns>是否成功保存</returns>
        </member>
        <member name="T:JFramework.Core.Cache.Redis.RedisConfigEntity">
            <summary>
            Redis配置信息类文件
            </summary>
        </member>
        <member name="P:JFramework.Core.Cache.Redis.RedisConfigEntity.ApplyRedis">
            <summary>
            是否应用Redis
            </summary>
        </member>
        <member name="P:JFramework.Core.Cache.Redis.RedisConfigEntity.AutoStart">
            <summary>
            自动重启
            </summary>
        </member>
        <member name="P:JFramework.Core.Cache.Redis.RedisConfigEntity.LocalCacheTime">
            <summary>
            本地缓存到期时间，该设置会与memcached搭配使用，单位:秒
            </summary>
        </member>
        <member name="P:JFramework.Core.Cache.Redis.RedisConfigEntity.MaxReadPoolSize">
            <summary>
            最大读链接数
            </summary>
        </member>
        <member name="P:JFramework.Core.Cache.Redis.RedisConfigEntity.MaxWritePoolSize">
            <summary>
            最大写链接数
            </summary>
        </member>
        <member name="P:JFramework.Core.Cache.Redis.RedisConfigEntity.ReadServerList">
            <summary>
            可读的Redis链接地址
            </summary>
        </member>
        <member name="P:JFramework.Core.Cache.Redis.RedisConfigEntity.RecordeLog">
            <summary>
            是否记录日志,该设置仅用于排查redis运行时出现的问题,如redis工作正常,请关闭该项
            </summary>
        </member>
        <member name="P:JFramework.Core.Cache.Redis.RedisConfigEntity.WriteServerList">
            <summary>
            可写的Redis链接地址
            </summary>
        </member>
        <member name="F:JFramework.Core.Cache.Redis.RedisConfigFileManager.filename">
            <summary>
            配置文件所在路径
            </summary>
        </member>
        <member name="F:JFramework.Core.Cache.Redis.RedisConfigFileManager.m_configinfo">
            <summary>
            Redis配置信息类
            </summary>
        </member>
        <member name="F:JFramework.Core.Cache.Redis.RedisConfigFileManager.m_fileoldchange">
            <summary>
            文件修改时间
            </summary>
        </member>
        <member name="M:JFramework.Core.Cache.Redis.RedisConfigFileManager.LoadConfig">
            <summary>
            返回配置类实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.Redis.RedisConfigFileManager.SaveConfig">
            <summary>
            保存配置类实例
            </summary>
            <returns></returns>
        </member>
        <member name="P:JFramework.Core.Cache.Redis.RedisConfigFileManager.ConfigFilePath">
            <summary>
            获取配置文件所在路径
            </summary>
        </member>
        <member name="P:JFramework.Core.Cache.Redis.RedisConfigFileManager.ConfigInfo">
            <summary>
            当前的配置类实例
            </summary>
        </member>
        <member name="T:JFramework.Core.Cache.Redis.RedisManager">
            <summary>
            MemCache管理操作类
            </summary>
        </member>
        <member name="F:JFramework.Core.Cache.Redis.RedisManager.redisConfigInfo">
            <summary>
            redis配置文件信息
            </summary>
        </member>
        <member name="M:JFramework.Core.Cache.Redis.RedisManager.#cctor">
            <summary>
            静态构造方法，初始化链接池管理对象
            </summary>
        </member>
        <member name="M:JFramework.Core.Cache.Redis.RedisManager.CreateManager">
            <summary>
            创建链接池管理对象
            </summary>
        </member>
        <member name="M:JFramework.Core.Cache.Redis.RedisManager.GetClient">
            <summary>
            客户端缓存操作对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:JFramework.Core.Cache.Redis.RedisStrategy">
            <summary>
            企业级Redis缓存策略类
            </summary>
        </member>
        <member name="M:JFramework.Core.Cache.Redis.RedisStrategy.AddObject(System.String,System.Object)">
            <summary>
            添加指定ID的对象
            </summary>
            <param name="objId">对象的键值</param>
            <param name="o">缓存的对象</param>
        </member>
        <member name="M:JFramework.Core.Cache.Redis.RedisStrategy.AddObject(System.String,System.Object,System.Int32)">
            <summary>
            加入当前对象到缓存中
            </summary>
            <param name="objId">对象的键值</param>
            <param name="o">缓存的对象</param>
            <param name="expire">到期时间,单位:秒</param>
        </member>
        <member name="M:JFramework.Core.Cache.Redis.RedisStrategy.ExitsKey(System.String)">
            <summary>
            key是否存在
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.Redis.RedisStrategy.FlushAll">
            <summary>
            清空的有缓存数据
            </summary>
        </member>
        <member name="M:JFramework.Core.Cache.Redis.RedisStrategy.GetValue``1(System.String)">
            <summary>
            获取key对应的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.Redis.RedisStrategy.KeySize">
            <summary>
            返回当前数据库的key数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.Redis.RedisStrategy.SetKeyExpire(System.String,System.Int32)">
            <summary>
            为key指定过期时间，单位是秒
            </summary>
            <param name="keyName"></param>
            <param name="second">到期时间:秒</param>
            <returns>true 成功, false 已经设置过过期时间或者不存在</returns>
        </member>
        <member name="P:JFramework.Core.Cache.Redis.RedisStrategy.LocalCacheTime">
            <summary>
            本地缓存到期时间,单位:秒
            </summary>
        </member>
        <member name="P:JFramework.Core.Cache.Redis.RedisStrategy.TimeOut">
            <summary>
            到期时间,单位:秒
            </summary>
        </member>
        <member name="T:JFramework.Core.Cache.WebCache">
            <summary>
            缓存类，对缓存进行全局控制管理
            </summary>
        </member>
        <member name="F:JFramework.Core.Cache.WebCache.applyRedis">
            <summary>
            是否使用Redis
            </summary>
        </member>
        <member name="F:JFramework.Core.Cache.WebCache.cs">
            <summary>
            缓存策略接口类
            </summary>
        </member>
        <member name="F:JFramework.Core.Cache.WebCache.lockHelper">
            <summary>
            用于线程锁对象
            </summary>
        </member>
        <member name="F:JFramework.Core.Cache.WebCache.redisStrategy">
            <summary>
            缓存策略接口实例（在WebCache静态方法中初始化该实例信息
            </summary>
        </member>
        <member name="M:JFramework.Core.Cache.WebCache.GetCacheService">
            <summary>
            单体模式返回当前类的实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Cache.WebCache.InitialCacheStrategy">
            <summary>
            实始化缓存
            </summary>
        </member>
        <member name="M:JFramework.Core.Cache.WebCache.LoadCacheStrategy(JFramework.Core.Cache.ICacheStrategy)">
            <summary>
            加载指定的缓存策略，实现策略的动态更新
            </summary>
            <param name="ics">要更换的缓存策略</param>
        </member>
        <member name="M:JFramework.Core.Cache.WebCache.LoadDefaultCacheStrategy">
            <summary>
            加载指定的缓存策略，实现策略的动态更新
            </summary>
        </member>
        <member name="T:JFramework.Core.Captcha.CaptchaType">
            <summary>
            图片验证码抽象类
            </summary>
        </member>
        <member name="T:JFramework.Core.Captcha.Captcha_Style1">
            <summary>
            线条干扰(蓝色)
            </summary>
        </member>
        <member name="T:JFramework.Core.Captcha.Captcha_Style10">
            <summary>
            线条干扰(彩色) 
            </summary>
        </member>
        <member name="T:JFramework.Core.Captcha.Captcha_Style11">
            <summary>
            GIF闪烁动画(彩色)
            </summary>
        </member>
        <member name="T:JFramework.Core.Captcha.Captcha_Style12">
            <summary>
            中文(彩色)  
            </summary>
        </member>
        <member name="T:JFramework.Core.Captcha.Captcha_Style13">
            <summary>
            字体旋转(简单) 
            </summary>
        </member>
        <member name="T:JFramework.Core.Captcha.Captcha_Style14">
            <summary>
            2年级算术(彩色)
            </summary>
        </member>
        <member name="T:JFramework.Core.Captcha.Captcha_Style2">
            <summary>
            噪点干扰(蓝色)
            </summary>
        </member>
        <member name="T:JFramework.Core.Captcha.Captcha_Style3">
            <summary>
            GIF颠簸动画
            </summary>
        </member>
        <member name="T:JFramework.Core.Captcha.Captcha_Style4">
            <summary>
            线条干扰(蓝色)
            </summary>
        </member>
        <member name="T:JFramework.Core.Captcha.Captcha_Style5">
            <summary>
            GIF闪烁动画(蓝色)   
            </summary>
        </member>
        <member name="T:JFramework.Core.Captcha.Captcha_Style6">
            <summary>
            噪点干扰(扭曲) 
            </summary>
        </member>
        <member name="T:JFramework.Core.Captcha.Captcha_Style7">
            <summary>
            中文(蓝色)
            </summary>
        </member>
        <member name="T:JFramework.Core.Captcha.Captcha_Style8">
            <summary>
            2年级算术(蓝色) 
            </summary>
        </member>
        <member name="T:JFramework.Core.Captcha.Captcha_Style9">
            <summary>
            噪点干扰(彩色)
            </summary>
        </member>
        <member name="T:JFramework.Core.Common.DateTimeConverter">
            <summary>
            DateTime 类型转换器
            </summary>
        </member>
        <member name="M:JFramework.Core.Common.DateTimeConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="dictionary"></param>
            <param name="type"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Common.DateTimeConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            序列化
            </summary>
            <param name="obj"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="P:JFramework.Core.Common.DateTimeConverter.SupportedTypes">
            <summary>
            获取受支持类型的集合
            </summary>
        </member>
        <member name="T:JFramework.Core.Ext.EnumExtensions">
            <summary>
            枚举拓展类
            </summary>
        </member>
        <member name="M:JFramework.Core.Ext.EnumExtensions.GetEnumDescription(System.Enum)">
            <summary>
            获取枚举类子项描述信息
            </summary>
            <param name="enumSubitem">枚举类子项</param>        
        </member>
        <member name="M:JFramework.Core.Ext.EnumExtensions.GetEnumAttributeClass(System.Enum,System.Type)">
            <summary>
            获取指定属性类的实例
            </summary>
            <param name="enumSubitem">枚举类子项</param>
            <param name="attributeType">DescriptionAttribute属性类或其自定义属性类 类型，例如：typeof(DescriptionAttribute)</param>
        </member>
        <member name="M:JFramework.Core.Ext.IntExtensions.TimeStampToDateTime(System.Int32,System.DateTime)">
            <summary>
            TimeStamp转DateTime
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.ByteExtensions.Reverse(System.Byte[])">
            <summary>
            反序
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.ByteExtensions.SubBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.ByteExtensions.SubBytes(System.Byte[],System.Int32@,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.Data.AttributeExtensions.GetColumnAttribute(System.Reflection.PropertyInfo)">
            <summary>
            获取字段映射对象
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.Data.AttributeExtensions.GetColumnAttribute(System.Type,System.String)">
            <summary>
            获取指定属性中的字段映射对象
            </summary>
            <param name="type">实体对象</param>
            <param name="propertyName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.Data.AttributeExtensions.GetCustomAttribute``1(System.Reflection.PropertyInfo)">
            <summary>
            获取指定类型的属性,如果不存在则返回默认
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.Data.AttributeExtensions.GetProperties``1(``0)">
            <summary>
            获取实体属性列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.Data.AttributeExtensions.GetTableAttribute(System.Type)">
            <summary>
            获取表映射属性对象
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.Data.AttributeExtensions.ReflectColumnName(System.Reflection.PropertyInfo)">
            <summary>
            获取指定属性的字段名称
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.Data.AttributeExtensions.ReflectColumnName(System.Type,System.String)">
            <summary>
            获取指定属性的字段名称
            </summary>
            <param name="type">实体对象</param>
            <param name="propertyName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.Data.AttributeExtensions.ReflectTableName(System.Type)">
            <summary>
            获取实体所映射的数据表名称
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.Data.AttributeExtensions.SetPropertyValue``1(``0,System.String,System.Object)">
            <summary>
            设置指定对象的属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">实体对象</param>
            <param name="colName">字段名称</param>
            <param name="value">值</param>
        </member>
        <member name="T:JFramework.Core.Ext.Data.DbCommandExtensions">
            <summary>
            IDbCommand 扩展
            </summary>
        </member>
        <member name="M:JFramework.Core.Ext.Data.DbCommandExtensions.AddInParameter(System.Data.IDbCommand,System.String,System.Object,System.String)">
            <summary>
            增加输入参数
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="value"></param>
            <param name="dbParmChar">数据库参数符号</param>
        </member>
        <member name="M:JFramework.Core.Ext.Data.DbCommandExtensions.AddInParameters(System.Data.IDbCommand,JFramework.Core.Data.DBFieldList,System.String)">
            <summary>
            添加DBFieldList参数列表
            </summary>
            <param name="cmd"></param>
            <param name="parameters">字段列表</param>
            <param name="dbParmChar">数据库参数符号</param>
        </member>
        <member name="M:JFramework.Core.Ext.Data.DbCommandExtensions.AddOutParameter(System.Data.IDbCommand,System.String,System.String,System.Int32)">
            <summary>
            增加输出参数
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="dbParmChar">数据库参数符号</param>
            <param name="size"></param>
        </member>
        <member name="M:JFramework.Core.Ext.Data.DbCommandExtensions.AddReturnParameter(System.Data.IDbCommand,System.String,System.String)">
            <summary>
            增加返回型参数
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="dbParmChar">数据库参数符号</param>
        </member>
        <member name="M:JFramework.Core.Ext.Data.DbCommandExtensions.GetPlaceholder(System.Data.IDbCommand,System.String)">
            <summary>
            获取数据库占位符信息
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="T:JFramework.Core.Ext.Data.EntityObjectExtensions">
            <summary>
            数据实体扩展
            </summary>
        </member>
        <member name="M:JFramework.Core.Ext.Data.EntityObjectExtensions.GetChangedPropertyList``1(``0)">
            <summary>
            获取字段已发生修改的属性列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.Data.EntityObjectExtensions.GetDBFieldByUID``1(``0)">
            <summary>
            获取数据实体唯一标识列[自增列]信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.Data.EntityObjectExtensions.GetInsertDbExecuteInfo``1(``0,System.String)">
            <summary>
            获取实体新增对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="dbParmChar"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.Data.EntityObjectExtensions.GetTableName``1(``0)">
            <summary>
            获取表名称
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.Data.EntityObjectExtensions.GetUIDName(System.Type,System.Boolean)">
            <summary>
            获取数据实体唯一标识列[自增列]名称
            </summary>
            <param name="entity"></param>
            <param name="isReflectName"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.Data.EntityObjectExtensions.GetUpdateDbExecuteInfo``1(``0,System.String,System.String)">
            <summary>
            获取实体修改对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="dbParmChar"></param>
            <param name="searchCondition"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.Data.EntityObjectExtensions.Instance``1">
            <summary>
            实例化指定实体
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.Data.EntityObjectExtensions.InstanceList``1">
            <summary>
            实例化指定实体列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.Data.EntityObjectExtensions.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转换为一个DataTable
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.Data.EntityObjectExtensions.ToEntity``1(System.Data.DataTable)">
            <summary>
            将DataTable数据转换成指定的实体对象
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="dataSource"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.Data.EntityObjectExtensions.ToEntity``1(System.Data.IDataReader)">
            <summary>
            将IDataReader数据转换成指定的实体对象
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="dataSource"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.Data.EntityObjectExtensions.ToEntityList``1(System.Data.DataSet,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="dstSource"></param>
            <param name="tableIndex"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.Data.EntityObjectExtensions.ToEntityList``1(System.Data.DataTable,System.Int32)">
            <summary>
            将DataTable数据转换成指定对象列表
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="dt">DataTable</param>
            <param name="entityNum">数量</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.Data.EntityObjectExtensions.ToEntityList``1(System.Data.IDataReader,System.Int32)">
            <summary>
            将IDataReader数据转换成指定的实体对象列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="dataSource"></param>
            <param name="entityNum">小于等于0，则返回所有数据</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Ext.DateExtensions.ToTimeStamp(System.DateTime)">
            <summary>
            将当前 System.DateTime 对象转换成TimeStamp(1970-1-1至当前时间戳)
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:JFramework.Core.Properties.CfgResource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.CfgResource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.CfgResource.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.CfgResource.DBSectionName">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="T:JFramework.Core.Properties.MsgResource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.ArgumentMustNotBeEmpty">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.ArgumentOutOfRange_Capacity">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.ArgumentOutOfRange_MustBePositive">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.ArgumentOutOfRange_SmallMaxCapacity">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.BeginTransactionFailed">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.ChangeDatabaseFailed">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.CloseDatabaseFailed">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.CommandTextMissing">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.CommitTransactionFailed">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.ConditionMissing">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.ConnectionStringMissing">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.DatabaseInstanceNotExisting">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.EmptyEntity">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.EntityMustContainPrimaryKey">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.ExceptionCanNotConvertType">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.ExceptionColumnNotFoundWhileMapping">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.ExceptionConvertionFailedWhenMappingPropertyToColumn">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.ExceptionInvalidType">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.ExceptionStringNullOrEmpty">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.ExecuteNonQueryFailed">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.ExecuteReaderFailed">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.ExecuteScalarFailed">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.GetDataSetFailed">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.GetDataTableFailed">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.IDAndPKOfEntityMissing">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.IdentityOfEntityMissing">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.InitializeGatewayFailed">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.InitializeGatewayFailedConnectionString">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.InitializeGatewayFailedEntity">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.InvalidArguments">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.InvalidDatabaseObject">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.InvalidEntityConfig">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.OpenDatabaseFailed">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.OracleSequenceMissing">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.ParentEntityMustContainPrimaryKey">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.PrimaryKeyMissing">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.PropertyTypeMustMatchAssociationType">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.RelationAttributeShouldHasAForeignKey">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.RollbackTransactionFailed">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.SameArgumentTypeRequired">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.ShouldBeginTransaction">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.SortedOrderRequired">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.TransactionNotExisting">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.TypesAreNotAssignable">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="P:JFramework.Core.Properties.MsgResource.UnknownType">
            <summary>
              查找类似  的本地化字符串。
            </summary>
        </member>
        <member name="T:JFramework.Core.Configuration.IAppender">
            <summary>
            Appender接口
            </summary>
        </member>
        <member name="P:JFramework.Core.Configuration.IAppender.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:JFramework.Core.Configuration.IAppender.ToType">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:JFramework.Core.Configuration.IAppender.Type">
            <summary>
            转换为Type
            </summary>
        </member>
        <member name="T:JFramework.Core.Configuration.XmlConfigurator">
            <summary>
            XmlConfigurator
            </summary>
        </member>
        <member name="F:JFramework.Core.Configuration.XmlConfigurator._XmlFileInfo">
            <summary>
            配置文件信息
            </summary>
        </member>
        <member name="F:JFramework.Core.Configuration.XmlConfigurator.AdoAppenders">
            <summary>
            数据库配置信息
            </summary>
        </member>
        <member name="M:JFramework.Core.Configuration.XmlConfigurator.FileChangeCallback">
            <summary>
            回调函数
            </summary>
        </member>
        <member name="M:JFramework.Core.Configuration.XmlConfigurator.GetAdoAppenders">
            <summary>
            获取数据库插件配置信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Configuration.XmlConfigurator.GetXmlAttributeData(System.Xml.XmlNode,System.String)">
            <summary>
            获取XML节点参数函数
            </summary>
            <param name="item"></param>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Configuration.XmlConfigurator.Init">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Configuration.XmlConfigurator.LoadXmlConfigurator">
            <summary>
            载入配置信息
            </summary>
        </member>
        <member name="M:JFramework.Core.Configuration.XmlConfigurator.ParseProviders(System.Xml.XmlDocument)">
            <summary>
            配置文件解析
            </summary>
            <param name="configDoc"></param>
        </member>
        <member name="T:JFramework.Core.Data.AdoHelper">
            <summary>
            数据库操作基类
            </summary>
        </member>
        <member name="F:JFramework.Core.Data.AdoHelper._command">
            <summary>
            IDbCommand
            </summary>
        </member>
        <member name="F:JFramework.Core.Data.AdoHelper._connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="F:JFramework.Core.Data.AdoHelper._connectionString">
            <summary>
            数据库连接串
            </summary>
        </member>
        <member name="F:JFramework.Core.Data.AdoHelper._dataAdapter">
            <summary>
            IDbDataAdapter
            </summary>
        </member>
        <member name="F:JFramework.Core.Data.AdoHelper._transaction">
            <summary>
            IDbTransaction
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.BeginTransaction(System.Double)">
            <summary>
            开始数据库事务[使用共享锁]
            </summary>
            <param name="activeTime">超时时间（以毫秒为单位）</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.BeginTransaction(System.Data.IsolationLevel,System.Double)">
            <summary>
            开始数据库事务[使用共享锁]
            </summary>
            <param name="isolationLevel">事务锁定等级</param>
            <param name="activeTime">超时时间（以毫秒为单位）</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.ChangeDatabase(System.String)">
            <summary>
            为打开的 Connection 对象更改当前数据库
            </summary>
            <param name="databaseName">要代替当前数据库进行使用的数据库的名称</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.ClearAllPools">
            <summary>
            清空所有对象的连接池[未实现]
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.ClearPool">
            <summary>
            清空当前连接关联的连接池[未实现]
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.Close">
            <summary>
            关闭与数据库的连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.Commit">
            <summary>
            事务提交
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.Dispose">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.Dispose(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.ExecuteNonQuery(System.String)">
            <summary>
            执行SQL语句或存储过程，并返回受影响的行数
            </summary>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.ExecuteNonQuery(System.String,System.Boolean)">
            <summary>
            执行SQL语句或存储过程，并返回受影响的行数
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.ExecuteNonQuery(System.String,System.Boolean,System.Data.IDataParameterCollection)">
            <summary>
            执行SQL语句或存储过程，并返回受影响的行数
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.ExecuteNonQuery(System.String,System.Boolean,System.Collections.Generic.IList{System.Data.IDataParameter})">
            <summary>
            执行SQL语句或存储过程，并返回受影响的行数
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.ExecuteNonQuery(System.String,System.Boolean,System.Data.IDataParameter)">
            <summary>
            执行SQL语句或存储过程，并返回受影响的行数
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.ExecuteReader(System.String)">
            <summary>
            执行指定的commandText，并返回IDataReader
            </summary>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.ExecuteScalar(System.String)">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.ExecuteScalar(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.ExecuteScalar(System.String,System.Boolean,System.Data.IDataParameter)">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.ExecuteScalar(System.String,System.Boolean,System.Collections.Generic.IList{System.Data.IDataParameter})">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.ExecuteScalar(System.String,System.Boolean,System.Data.IDataParameterCollection)">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.OnException(System.Data.Common.DbException)">
            <summary>
            数据库事务操作异常的操作
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.Open">
            <summary>
            打开一个数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.Open(System.String)">
            <summary>
            打开一个数据库连接
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.ResetCommandParameters">
            <summary>
            清除以前的命令参数
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.ResetCommandParameters(System.Data.IDataParameter)">
            <summary>
            清除以前的命令参数，并重新分配参数.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.ResetCommandParameters(System.Collections.Generic.IList{System.Data.IDataParameter})">
            <summary>
            清除以前的命令参数，并重新分配参数.
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.ResetCommandParameters(System.Data.IDataParameterCollection)">
            <summary>
            清除以前的命令参数，并重新分配参数.
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.ResetCommandType(System.Boolean)">
            <summary>
            重置数据库命令类型
            </summary>
            <param name="isStoredProcedure">是否是存储过程</param>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.Rollback">
            <summary>
            事务回滚
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.ToString">
            <summary>
            返回数据库连接串
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.AdoHelper.TransactionCleaner_Timeout">
            <summary>
            超时回调
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.AdoHelper.Command">
            <summary>
            IDbCommand
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.AdoHelper.Connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.AdoHelper.ConnectionState">
            <summary>
            当前数据库连接状态
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.AdoHelper.ConnectionString">
            <summary>
            数据库连接串
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.AdoHelper.DataAdapter">
            <summary>
            IDbDataAdapter
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.AdoHelper.Parameters">
            <summary>
            IDataParameterCollection
            </summary>
        </member>
        <member name="T:JFramework.Core.Data.ColumnAttribute">
            <summary>
            字段映射
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.ColumnAttribute.DbType">
            <summary>
            获取或设置数据库列的类型
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.ColumnAttribute.IsIdentity">
            <summary>
            是否标识列[自增]，默认false
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.ColumnAttribute.IsNull">
            <summary>
            是否允许空值，默认true
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.ColumnAttribute.IsPrimaryKey">
            <summary>
            获取或设置一个值，该值指示该类成员是否表示作为表的整个主键或部分主键的列，默认false
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.ColumnAttribute.IsUnique">
            <summary>
            是否唯一标识，默认false
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.ColumnAttribute.IsValid">
            <summary>
            是否有效，指示该列是否为表字段映射，默认true
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.ColumnAttribute.Name">
            <summary>
            获取或设置列名称
            </summary>
        </member>
        <member name="T:JFramework.Core.Data.TableAttribute">
            <summary>
            数据表实体映射
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.TableAttribute.Name">
            <summary>
            表或视图的名称，如果未使用 Name 指定名称，则假定表名称与类名相同
            </summary>
        </member>
        <member name="T:JFramework.Core.Data.Common.CommonUtils">
            <summary>
            工具
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.Common.CommonUtils.EnumParse``1(System.String)">
            <summary>
            用于字符串和枚举类型的转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.Common.CommonUtils.GetConfigValueByKey(System.String)">
            <summary>
            根据传入的Key获取配置文件中的Value值
            </summary>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="T:JFramework.Core.Data.AdoAppender">
            <summary>
            数据库配置文件信息
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.AdoAppender.ActiveTime">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.AdoAppender.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.AdoAppender.ToType">
            <summary>
            转换为Type
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.AdoAppender.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.ConnEncrypt.DataDecrypt(System.Byte[],System.String)">
            <summary>
            解密
            </summary>
            <param name="data"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.ConnEncrypt.DecryptFile(System.String)">
            <summary>
            从文件中读取信息，并解密
            </summary>
            <param name="fileFullName"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.ConnEncrypt.GetKey(System.Byte[],System.Int32)">
            <summary>
            打乱密码
            </summary>
            <param name="pass">密码</param>
            <param name="kLen">密码箱长度</param>
            <returns>打乱后的密码</returns>
        </member>
        <member name="T:JFramework.Core.Data.DatabaseType">
            <summary>
            所支持的数据库类型
            </summary>
        </member>
        <member name="F:JFramework.Core.Data.DatabaseType.SqlServer">
            <summary>
            SQL Server
            </summary>
        </member>
        <member name="F:JFramework.Core.Data.DatabaseType.Oracle">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="F:JFramework.Core.Data.DatabaseType.Oledb">
            <summary>
            Oledb
            </summary>
        </member>
        <member name="T:JFramework.Core.Data.DataProvider">
            <summary>
            数据库操作基类
            </summary>
        </member>
        <member name="F:JFramework.Core.Data.DataProvider._database">
            <summary>
            数据库操作接口
            </summary>
        </member>
        <member name="F:JFramework.Core.Data.DataProvider._isInTransaction">
            <summary>
            是否启用事务
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.BeginTransaction(System.Double)">
            <summary>
            开始数据库事务[共享锁]
            </summary>
            <param name="activeTime">超时时间（以毫秒为单位）</param>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.BeginTransaction(System.Data.IsolationLevel,System.Double)">
            <summary>
            开始数据库事务
            </summary>
            <param name="isolationLevel">事务等级</param>
            <param name="activeTime">超时时间</param>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.CloseConnection">
            <summary>
            关闭数据库连接
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.Commit">
            <summary>
            提交事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.Delete``1(System.String)">
            <summary>
            删除实体对应数据库中的数据[带条件]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="searchCondition"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            删除实体对应数据库中的数据[lambda表达式]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.ExecuteDataSet(System.String,System.Boolean)">
            <summary>
            执行SQL语句或过程，并返回DataSet
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.ExecuteDataSet(System.String,System.Boolean,JFramework.Core.Data.DBField)">
            <summary>
            执行SQL语句或过程，并返回DataSet
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.ExecuteDataSet(System.String,System.Boolean,JFramework.Core.Data.DBFieldList)">
            <summary>
            执行SQL语句或过程，并返回DataSet
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.ExecuteDataTable(System.String,System.Boolean)">
            <summary>
            执行SQL语句或过程，并返回DataTable
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.ExecuteDataTable(System.String,System.Boolean,JFramework.Core.Data.DBField)">
            <summary>
            执行SQL语句或过程，并返回DataTable
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.ExecuteDataTable(System.String,System.Boolean,JFramework.Core.Data.DBFieldList)">
            <summary>
            执行SQL语句或过程，并返回DataTable
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.ExecuteNonQuery(System.String,System.Boolean)">
            <summary>
            执行SQL语句或过程，并返回操作结果.
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.ExecuteNonQuery(System.String,System.Boolean,JFramework.Core.Data.DBField)">
            <summary>
            执行SQL语句或过程，并返回操作结果.
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <param name="dbField"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.ExecuteNonQuery(System.String,System.Boolean,JFramework.Core.Data.DBFieldList)">
            <summary>
            执行SQL语句或过程，并返回操作结果.
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <param name="dbFieldList"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.ExecuteReader(System.String,System.Boolean)">
            <summary>
            执行SQL语句或过程，并返回IDataReader
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.ExecuteReader(System.String,System.Boolean,JFramework.Core.Data.DBField)">
            <summary>
            执行SQL语句或过程，并返回IDataReader
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.ExecuteReader(System.String,System.Boolean,JFramework.Core.Data.DBFieldList)">
            <summary>
            执行SQL语句或过程，并返回IDataReader
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.ExecuteScalar(System.String,System.Boolean)">
            <summary>
            执行查询，并返回第一行第一列
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.ExecuteScalar(System.String,System.Boolean,JFramework.Core.Data.DBField)">
            <summary>
            执行查询，并返回第一行第一列
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.ExecuteScalar(System.String,System.Boolean,JFramework.Core.Data.DBFieldList)">
            <summary>
            执行查询，并返回第一行第一列
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetConnectionString(System.String)">
            <summary>
            获取数据库连接串
            </summary>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetDataCount``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            获取记录总数[lambda表达式]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetDataCount``1(System.String)">
            <summary>
            获取记录总数[条件]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="searchCondition"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetDataCount``1(JFramework.Core.Data.DbExecuteInfo)">
            <summary>
            获取记录总数[条件]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbExecuteInfo"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetDataCount(System.String,JFramework.Core.Data.DbExecuteInfo)">
            <summary>
            获取记录总数[条件]
            </summary>
            <param name="dataTableCode"></param>
            <param name="dbExecuteInfo"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetDataCount(System.String,System.String)">
            <summary>
            获取记录总数
            </summary>
            <param name="dataTableCode"></param>
            <param name="searchCondition"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetDataListByPage(System.String,System.Int32,System.Int32,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            分页读取海量数据表数据集 [DataTable]
            </summary>
            <param name="dataTableCode">数据表代码</param>
            <param name="pageSize">页面大小</param>
            <param name="currentPageIndex">当前页索引</param>
            <param name="dataKeyCode">数据主键代码</param>
            <param name="descFlag">按逆序输出还是正序输出</param>
            <param name="searchCondition">检索条件</param>
            <param name="isDateTimeFlag">是否是时间字段</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetDataListByPage(System.String,System.Int32,System.Int32,System.String,System.Boolean,JFramework.Core.Data.DbExecuteInfo,System.Boolean)">
            <summary>
            分页读取海量数据表数据集 [DataTable]
            </summary>
            <param name="dataTableCode">数据表代码</param>
            <param name="pageSize">页面大小</param>
            <param name="currentPageIndex">当前页索引</param>
            <param name="dataKeyCode">数据主键代码</param>
            <param name="descFlag">按逆序输出还是正序输出</param>
            <param name="dbExecuteInfo">检索条件</param>
            <param name="isDateTimeFlag">是否是时间字段</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            获取数据实体[lambda表达式]
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetEntity``1(JFramework.Core.Data.DbExecuteInfo)">
            <summary>
            获取数据实体[数据库执行对象]
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="dbExecuteInfo"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetEntity``1(System.String)">
            <summary>
            获取数据实体[查询条件]
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="searchCondition"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetEntity``1(System.Int32,System.String)">
            <summary>
            获取数据实体[查询条件]
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="topnum"></param>
            <param name="searchCondition"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetEntityList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            获取实体列表[lambda表达式]
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetEntityList``1(JFramework.Core.Data.DbExecuteInfo)">
            <summary>
            获取实体列表[数据库执行对象]
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="dbExecuteInfo"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetEntityList``1(System.String,System.Boolean)">
            <summary>
            获取实体列表[查询条件]
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="searchCondition"></param>
            <param name="isWithUnlock"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetEntityList``1(System.Int32,System.String,System.Boolean)">
            <summary>
            获取实体列表[查询条件]
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="topnum"></param>
            <param name="searchCondition"></param>
            <param name="isWithUnlock"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetGridDataByPage``1(System.Int32,System.Int32,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            分页读取海量数据表数据集 [实体]
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="pageSize">页面大小</param>
            <param name="currentPageIndex">当前页索引</param>
            <param name="dataKeyCode">数据主键代码</param>
            <param name="descFlag">按逆序输出还是正序输出</param>
            <param name="searchCondition">检索条件</param>
            <param name="isDateTimeFlag">是否是时间字段</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetGridDataByPage``1(System.Int32,System.Int32,System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            分页读取海量数据表数据集 [实体]
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="pageSize">页面大小</param>
            <param name="currentPageIndex">当前页索引</param>
            <param name="dataKeyCode">数据主键代码</param>
            <param name="descFlag">按逆序输出还是正序输出</param>
            <param name="predicate">检索条件</param>
            <param name="isDateTimeFlag">是否是时间字段</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetGridDataByPage``1(System.Int32,System.Int32,System.String,System.Boolean,JFramework.Core.Data.DbExecuteInfo,System.Boolean)">
            <summary>
            分页读取海量数据表数据集 [实体]
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="pageSize">页面大小</param>
            <param name="currentPageIndex">当前页索引</param>
            <param name="dataKeyCode">数据主键代码</param>
            <param name="descFlag">按逆序输出还是正序输出</param>
            <param name="dbExecuteInfo">检索条件</param>
            <param name="isDateTimeFlag">是否是时间字段</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetMaxID``1(System.Int32)">
            <summary>
            获取指定实体对象数据表最大唯一标识
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stepLength"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetMaxID(System.String,System.Int32)">
            <summary>
            获取指定实体对象数据表最大唯一标识
            </summary>
            <param name="tableName">数据表名称</param>
            <param name="stepLength"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetParameter(System.String,System.Object,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            获取参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="value">值</param>
            <param name="dbType">类型</param>
            <param name="direction">指示参数是只可输入、只可输出、双向还是存储过程返回值参数</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetParameters(JFramework.Core.Data.DBFieldList)">
            <summary>
            获取参数
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetSelectCommandText``1(System.String,System.Boolean)">
            <summary>
            获取实体查询语句
            </summary>
            <typeparam name="T"></typeparam>
            <param name="searchCondition"></param>
            <param name="isWithUnlock"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetSelectCommandText``1(System.Int32,System.String,System.Boolean)">
            <summary>
            获取实体查询语句
            </summary>
            <typeparam name="T"></typeparam>
            <param name="topnum">条数</param>
            <param name="searchCondition">条件语句</param>
            <param name="isWithUnlock">是否使用with关键字，可能会脏读</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.GetTableName``1">
            <summary>
            获取数据实体表名称
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.Initialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.Insert``1(``0)">
            <summary>
            将实体数据保存到数据库
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.OpenConnection">
            <summary>
            打开数据库连接
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.Rollback">
            <summary>
            回滚事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.ToString">
            <summary>
            获取执行的SQL语句或过程
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.Update``1(``0)">
            <summary>
            将实体数据修改到数据库[通过主键修改]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.Update``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            将实体数据修改到数据库[lambda表达式]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DataProvider.Update``1(``0,System.String)">
            <summary>
            将实体数据修改到数据库[带条件]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="searchCondition"></param>
            <returns></returns>
        </member>
        <member name="P:JFramework.Core.Data.DataProvider.Command">
            <summary>
            IDbCommand
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.DataProvider.Connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.DataProvider.ConnectionCode">
            <summary>
            ConnectionCode
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.DataProvider.ConnectionState">
            <summary>
            当前数据库连接状态
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.DataProvider.ConnectionString">
            <summary>
            数据库连接串
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.DataProvider.DbParmChar">
            <summary>
            参数符号[@、:]
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.DataProvider.DefaultActiveTime">
            <summary>
            事务超时时间（以毫秒为单位）
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.DataProvider.IsInTransaction">
            <summary>
            是否在事务
            </summary>
        </member>
        <member name="T:JFramework.Core.Data.DbColumnMap">
            <summary>
            列信息
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.DbColumnMap.CanBeNull">
            <summary>
            指示列可以包含 null 值。
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.DbColumnMap.DbName">
            <summary>
            数据库中的列名称
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.DbColumnMap.DbType">
            <summary>
            获取或设置数据库列的类型
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.DbColumnMap.IsPrimaryKey">
            <summary>
            获取或设置一个值，该值指示该类成员是否表示作为表的整个主键或部分主键的列
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.DbColumnMap.Name">
            <summary>
            列名称[实体中名称]
            </summary>
        </member>
        <member name="T:JFramework.Core.Data.DbExecuteInfo">
            <summary>
            数据库执行对象
            </summary>
        </member>
        <member name="F:JFramework.Core.Data.DbExecuteInfo.Parameters">
            <summary>
            参数列表
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.DbExecuteInfo.CommandText">
            <summary>
            SQL语句或过程
            </summary>
        </member>
        <member name="T:JFramework.Core.Data.DbFactory">
            <summary>
            数据库访问工厂
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.DbFactory.Create(System.String)">
            <summary>
            创建指定数据库提供程序
            </summary>
            <param name="connectionStringCode">数据库连接串名称</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DbFactory.GetDataProviderMapping(System.String)">
            <summary>
            获取数据库配置信息
            </summary>
            <param name="connectionStringCode"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DbFactory.InnerCreate(System.String)">
            <summary>
            创建数据库提供程序
            </summary>
            <param name="connectionStringCode">数据库连接串名称</param>
            <returns></returns>
        </member>
        <member name="T:JFramework.Core.Data.DBField">
            <summary>
            数据库字段对象
            </summary>
        </member>
        <member name="F:JFramework.Core.Data.DBField._Type">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.DBField.#ctor(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            
            </summary>
            <param name="columnName"></param>
            <param name="columnValue"></param>
            <param name="direction">指示参数是只可输入、只可输出、双向还是存储过程返回值参数</param>
        </member>
        <member name="M:JFramework.Core.Data.DBField.#ctor(System.String,System.Object,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            
            </summary>
            <param name="columnName"></param>
            <param name="columnValue"></param>
            <param name="dbType"></param>
            <param name="direction">指示参数是只可输入、只可输出、双向还是存储过程返回值参数</param>
        </member>
        <member name="M:JFramework.Core.Data.DBField.WriteLog">
            <summary>
            输出字段信息日志
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.DBField.Direction">
            <summary>
            获取或设置一个值，该值指示参数是只可输入、只可输出、双向还是存储过程返回值参数
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.DBField.Name">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.DBField.Type">
            <summary>
            DbType
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.DBField.Value">
            <summary>
            字段值
            </summary>
        </member>
        <member name="T:JFramework.Core.Data.DBFieldList">
            <summary>
            数据库字段对象列表
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.DBFieldList.#ctor(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            
            </summary>
            <param name="columnName"></param>
            <param name="columnValue"></param>
            <param name="direction">指示参数是只可输入、只可输出、双向还是存储过程返回值参数</param>
        </member>
        <member name="M:JFramework.Core.Data.DBFieldList.Add(System.String,System.Object)">
            <summary>
            将字段对象添加到未尾
            </summary>
            <param name="columnName"></param>
            <param name="columnValue"></param>
        </member>
        <member name="M:JFramework.Core.Data.DBFieldList.Add(System.String,System.Object,System.Data.DbType)">
            <summary>
            
            </summary>
            <param name="columnName"></param>
            <param name="columnValue"></param>
            <param name="dbType">数据类型</param>
        </member>
        <member name="M:JFramework.Core.Data.DBFieldList.Add(System.String,System.Object,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            将字段对象添加到未尾
            </summary>
            <param name="columnName"></param>
            <param name="columnValue"></param>
            <param name="dbType"></param>
            <param name="direction">指示参数是只可输入、只可输出、双向还是存储过程返回值参数</param>
        </member>
        <member name="M:JFramework.Core.Data.DBFieldList.Concat(JFramework.Core.Data.DBField)">
            <summary>
            连接
            </summary>
            <param name="dbField"></param>
        </member>
        <member name="M:JFramework.Core.Data.DBFieldList.Concat(JFramework.Core.Data.DBFieldList)">
            <summary>
            连接
            </summary>
            <param name="dbFieldList"></param>
        </member>
        <member name="M:JFramework.Core.Data.DBFieldList.GetDBField(System.String)">
            <summary>
            获取指定名称的字段
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="P:JFramework.Core.Data.DBFieldList.Item(System.String)">
            <summary>
            获取数据库字段对象
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="T:JFramework.Core.Data.DbTableMap">
            <summary>
            表信息
            </summary>
        </member>
        <member name="F:JFramework.Core.Data.DbTableMap.ColumnList">
            <summary>
            字段列表
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.DbTableMap.DbColumnMap(System.Type)">
            <summary>
            列信息
            </summary>
            <param name="dbEntity"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.DbTableMap.GetTableName(System.Type)">
            <summary>
            获取表名称
            </summary>
            <param name="dbEntity"></param>
            <returns></returns>
        </member>
        <member name="P:JFramework.Core.Data.DbTableMap.TableName">
            <summary>
            表名称
            </summary>
        </member>
        <member name="T:JFramework.Core.Data.EntityObject">
            <summary>
            数据实体对象基类
            </summary>
        </member>
        <member name="F:JFramework.Core.Data.EntityObject._Column">
            <summary>
            字段值发生变化时进行设置
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.EntityObject.GetChangedColumn">
            <summary>
            获取值已发生变化的字段列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.EntityObject.ReportPropertyChanged(System.String)">
            <summary>
            报告字段内容已改变
            </summary>
            <param name="columnName">字段名称</param>
        </member>
        <member name="M:JFramework.Core.Data.EntityObject.ResetChangedColumn">
            <summary>
            重置已修改过的字段
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.EntityObject.ResetChangedColumn(System.String)">
            <summary>
            重置已修改过的字段
            </summary>
            <param name="columnName">字段名称</param>
        </member>
        <member name="M:JFramework.Core.Data.EntityObject.Validator">
            <summary>
            验证
            </summary>
            <returns></returns>
        </member>
        <member name="P:JFramework.Core.Data.EntityObject.IsReportPropertyChanged">
            <summary>
            是否报告字段内容已改变
            </summary>
        </member>
        <member name="T:JFramework.Core.Data.GenerationType">
            <summary>
            唯一标识类型
            </summary>
        </member>
        <member name="F:JFramework.Core.Data.GenerationType.INDENTITY">
            <summary>
            自动增长
            </summary>
        </member>
        <member name="F:JFramework.Core.Data.GenerationType.SEQUENCE">
            <summary>
            序列
            </summary>
        </member>
        <member name="F:JFramework.Core.Data.GenerationType.TABLE">
            <summary>
            TABLE
            </summary>
        </member>
        <member name="T:JFramework.Core.Data.GridData`1">
            <summary>
            分页实体类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:JFramework.Core.Data.GridData`1.PageIndex">
            <summary>
            当前页索引
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.GridData`1.PageSize">
            <summary>
            页面大小
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.GridData`1.PageTotal">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.GridData`1.rows">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.GridData`1.total">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.BeginTransaction(System.Double)">
            <summary>
            开始数据库事务[共享锁]
            </summary>
            <param name="activeTime">超时时间（以毫秒为单位）</param>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.BeginTransaction(System.Data.IsolationLevel,System.Double)">
            <summary>
            开始数据库事务
            </summary>
            <param name="isolationLevel">事务等级</param>
            <param name="activeTime">超时时间</param>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.Commit">
            <summary>
            提交事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.Delete``1(System.String)">
            <summary>
            删除实体对应数据库中的数据[带条件]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="searchCondition"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            删除实体对应数据库中的数据[lambda表达式]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.ExecuteDataSet(System.String,System.Boolean)">
            <summary>
            执行SQL语句或过程，并返回DataSet
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.ExecuteDataSet(System.String,System.Boolean,JFramework.Core.Data.DBField)">
            <summary>
            执行SQL语句或过程，并返回DataSet
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.ExecuteDataSet(System.String,System.Boolean,JFramework.Core.Data.DBFieldList)">
            <summary>
            执行SQL语句或过程，并返回DataSet
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.ExecuteDataTable(System.String,System.Boolean)">
            <summary>
            执行SQL语句或过程，并返回DataTable
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.ExecuteDataTable(System.String,System.Boolean,JFramework.Core.Data.DBField)">
            <summary>
            执行SQL语句或过程，并返回DataTable
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.ExecuteDataTable(System.String,System.Boolean,JFramework.Core.Data.DBFieldList)">
            <summary>
            执行SQL语句或过程，并返回DataTable
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.ExecuteNonQuery(System.String,System.Boolean)">
            <summary>
            执行SQL语句或过程，并返回影响的行数.
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure">是否存储过程</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.ExecuteNonQuery(System.String,System.Boolean,JFramework.Core.Data.DBField)">
            <summary>
            执行SQL语句或过程，并返回影响的行数.
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure">是否存储过程</param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.ExecuteNonQuery(System.String,System.Boolean,JFramework.Core.Data.DBFieldList)">
            <summary>
            执行SQL语句或过程，并返回影响的行数.
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure">是否存储过程</param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.ExecuteReader(System.String,System.Boolean)">
            <summary>
            执行SQL语句或过程，并返回IDataReader
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure">是否存储过程</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.ExecuteReader(System.String,System.Boolean,JFramework.Core.Data.DBField)">
            <summary>
            执行SQL语句或过程，并返回IDataReader
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure">是否存储过程</param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.ExecuteReader(System.String,System.Boolean,JFramework.Core.Data.DBFieldList)">
            <summary>
            执行SQL语句或过程，并返回IDataReader
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure">是否存储过程</param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.ExecuteScalar(System.String,System.Boolean)">
            <summary>
            执行查询，并返回第一行第一列.
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.ExecuteScalar(System.String,System.Boolean,JFramework.Core.Data.DBField)">
            <summary>
            执行查询，并返回第一行第一列.
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.ExecuteScalar(System.String,System.Boolean,JFramework.Core.Data.DBFieldList)">
            <summary>
            执行查询，并返回第一行第一列.
            </summary>
            <param name="commandText"></param>
            <param name="isProcedure"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.GetDataCount``1(System.String)">
            <summary>
            获取记录总数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="searchCondition"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.GetDataCount``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            获取记录总数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.GetDataCount(System.String,System.String)">
            <summary>
            获取记录总数
            </summary>
            <param name="dataTableCode"></param>
            <param name="searchCondition"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.GetDataListByPage(System.String,System.Int32,System.Int32,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            分页读取海量数据表数据集 [DataSet]
            </summary>
            <param name="dataTableCode">数据表代码</param>
            <param name="pageSize">页面大小</param>
            <param name="currentPageIndex">当前页索引</param>
            <param name="dataKeyCode">数据主键代码</param>
            <param name="descFlag">按逆序输出还是正序输出</param>
            <param name="searchCondition">检索条件</param>
            <param name="isDateTimeFlag">是否是时间字段</param>
            <returns>海量数据表数据集</returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.GetEntity``1(JFramework.Core.Data.DbExecuteInfo)">
            <summary>
            获取数据实体[数据库执行对象]
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="dbExecuteInfo"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.GetEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            获取数据实体[lambda表达式]
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.GetEntity``1(System.String)">
            <summary>
            获取数据实体[查询条件]
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="searchCondition"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.GetEntity``1(System.Int32,System.String)">
            <summary>
            获取实体列表[查询条件]
            </summary>
            <typeparam name="TResult">实体对象</typeparam>
            <param name="topnum"></param>
            <param name="searchCondition"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.GetEntityList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            获取实体列表[lambda表达式]
            </summary>
            <typeparam name="TResult">实体对象</typeparam>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.GetEntityList``1(System.String,System.Boolean)">
            <summary>
            获取实体列表[查询条件]
            </summary>
            <typeparam name="TResult">实体对象</typeparam>
            <param name="searchCondition">查询条件</param>
            <param name="isWithUnlock">是否使用with关键字，可能会脏读</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.GetEntityList``1(System.Int32,System.String,System.Boolean)">
            <summary>
            获取实体列表[带条数查询条件]
            </summary>
            <typeparam name="TResult">实体对象</typeparam>
            <param name="topnum">条数</param>
            <param name="searchCondition">查询条件</param>
            <param name="isWithUnlock">是否使用with关键字，可能会脏读</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.GetGridDataByPage``1(System.Int32,System.Int32,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            分页读取海量数据表数据集 [实体]
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="pageSize">页面大小</param>
            <param name="currentPageIndex">当前页索引</param>
            <param name="orderKey">排序字段</param>
            <param name="descFlag">按逆序输出还是正序输出</param>
            <param name="searchCondition">检索条件</param>
            <param name="isDateTimeFlag">是否是时间字段</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.GetGridDataByPage``1(System.Int32,System.Int32,System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            分页读取海量数据表数据集 [实体]
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="pageSize">页面大小</param>
            <param name="currentPageIndex">当前页索引</param>
            <param name="orderKey">排序字段</param>
            <param name="descFlag">按逆序输出还是正序输出</param>
            <param name="predicate">检索条件</param>
            <param name="isDateTimeFlag">是否是时间字段</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.GetGridDataByPage``1(System.Int32,System.Int32,System.String,System.Boolean,JFramework.Core.Data.DbExecuteInfo,System.Boolean)">
            <summary>
            分页读取海量数据表数据集 [实体]
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="pageSize">页面大小</param>
            <param name="currentPageIndex">当前页索引</param>
            <param name="orderKey">排序字段</param>
            <param name="descFlag">按逆序输出还是正序输出</param>
            <param name="dbExecuteInfo">检索条件</param>
            <param name="isDateTimeFlag">是否是时间字段</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.GetMaxID``1(System.Int32)">
            <summary>
            获取指定实体对象数据表最大唯一标识
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stepLength">步长</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.GetMaxID(System.String,System.Int32)">
            <summary>
            获取唯一标识
            </summary>
            <param name="tableName"></param>
            <param name="stepLength"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.Insert``1(``0)">
            <summary>
            将实体数据保存到数据库
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.Rollback">
            <summary>
            回滚事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.Update``1(``0)">
            <summary>
            将实体数据修改到数据库[通过主键修改]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.Update``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            将实体数据修改到数据库[lambda表达式]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.IDatabase.Update``1(``0,System.String)">
            <summary>
            将实体数据修改到数据库[带条件]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="searchCondition"></param>
            <returns></returns>
        </member>
        <member name="P:JFramework.Core.Data.IDatabase.DefaultActiveTime">
            <summary>
            事务超时时间（以毫秒为单位）
            </summary>
        </member>
        <member name="T:JFramework.Core.Data.IEntityObject">
            <summary>
            数据实体接口
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.IEntityObject.Validator">
            <summary>
            验证
            </summary>
            <returns></returns>
        </member>
        <member name="T:JFramework.Core.Data.LinqToSql.ConditionBuilder">
            <summary>
            条件生成
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ConditionBuilder.#ctor(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="dbParmChar">占位符</param>
            <param name="isRename">是否重命名参数占位符[修改时需要用到]</param>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ConditionBuilder.Build(System.Linq.Expressions.Expression)">
            <summary>
            生成
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ConditionBuilder.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            表达式验证
            </summary>
            <param name="b">二元表达式</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ConditionBuilder.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            值处理
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ConditionBuilder.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            字段名称处理
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="P:JFramework.Core.Data.LinqToSql.ConditionBuilder.ColumnIndex">
            <summary>
            字段序号
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.LinqToSql.ConditionBuilder.IsRename">
            <summary>
            是否重命名参数
            </summary>
        </member>
        <member name="T:JFramework.Core.Data.LinqToSql.ExpressionVisitor">
            <summary>
            表达式节点的访问
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            访问控制
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            二元运算表达式
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ExpressionVisitor.VisitBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            访问绑定
            </summary>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ExpressionVisitor.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            绑定初始化新建对象的成员
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            条件表达式
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            常量表达式
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ExpressionVisitor.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            访问元素初始化
            </summary>
            <param name="initializer"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ExpressionVisitor.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            访问元素初始化列表
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ExpressionVisitor.VisitExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            获取参数列表
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            访问调用
            </summary>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Lambda表达式
            </summary>
            <param name="lambda"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            访问初始化集合对象
            </summary>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            字段或属性
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            初始化表达中的字段或属性
            </summary>
            <param name="assignment"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            访问构造函数并初始化多个成员
            </summary>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            初始化新建对象的集合成员的元素
            </summary>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            初始化新建对象的成员的成员
            </summary>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            方法调用
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            访问构造函数
            </summary>
            <param name="nex"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            访问新数组成员
            </summary>
            <param name="na"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            参数表达式
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ExpressionVisitor.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            表达式和类型转换操作
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.LinqToSql.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            一元运算表达式
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="T:JFramework.Core.Data.LinqToSql.PartialEvaluator">
            <summary>
            PartialEvaluator
            </summary>
        </member>
        <member name="T:JFramework.Core.Data.LinqToSql.PartialEvaluator.Nominator">
            <summary>
            执行自下而上的分析，以确定哪些节点都不可能是一个评估子树的一部分
            </summary>
        </member>
        <member name="T:JFramework.Core.Data.Result">
            <summary>
            操作结果
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.Result.Description">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.Result.ErrMessage">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.Result.IsOK">
            <summary>
            是否执行成功
            </summary>
        </member>
        <member name="P:JFramework.Core.Data.Result.StateCodeID">
            <summary>
            状态标识
            </summary>
        </member>
        <member name="T:JFramework.Core.Data.RuleObject`2">
            <summary>
            数据操作规则基类
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TRule">规则</typeparam>
        </member>
        <member name="F:JFramework.Core.Data.RuleObject`2._Db">
            <summary>
            数据库操作
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.RuleObject`2.Delete(System.Int32)">
            <summary>
            删除
            </summary>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.RuleObject`2.Delete(System.String)">
            <summary>
            删除
            </summary>
            <param name="searchCondition"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.RuleObject`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.RuleObject`2.GetCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取指定条件的记录数量[lambda表达式]
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.RuleObject`2.GetCount(System.String,System.String)">
            <summary>
            获取指定条件的记录数量[搜索条件]
            </summary>
            <param name="dataTable"></param>
            <param name="searchCondition"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.RuleObject`2.GetEntity(System.Int32)">
            <summary>
            读取数据实体规则[唯一标识]
            </summary>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.RuleObject`2.GetEntity(System.String)">
            <summary>
            读取数据实体规则[搜索条件]
            </summary>
            <param name="searchCondition"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.RuleObject`2.GetEntity(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            读取数据实体规则[[lambda表达式]]
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.RuleObject`2.GetEntityList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            读取数据实体列表规则[lambda表达式]
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.RuleObject`2.GetEntityList(System.Int32,System.String,System.Boolean)">
            <summary>
            读取固定条数数据实体列表规则
            </summary>
            <param name="topnum"></param>
            <param name="searchCondition"></param>
            <param name="isWithUnlock"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.RuleObject`2.GetGridDataByPage(System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            分页读取海量数据表数据集 [实体]
            </summary>
            <param name="pageSize">页面大小</param>
            <param name="currentPageIndex">当前页索引</param>
            <param name="descFlag">按逆序输出还是正序输出</param>
            <param name="searchCondition">检索条件</param>
            <returns>海量数据表数据集GridData</returns>
        </member>
        <member name="M:JFramework.Core.Data.RuleObject`2.GetGridDataByPage(System.Int32,System.Int32,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            分页读取海量数据表数据集 [实体，可用时间字段]
            </summary>
            <param name="pageSize">页面大小</param>
            <param name="currentPageIndex">当前页索引</param>
            <param name="dataKeyCode">数据主键代码</param>
            <param name="descFlag">按逆序输出还是正序输出</param>
            <param name="searchCondition">检索条件</param>
            <param name="isDateTimeFlag">是否是时间字段</param>
            <returns>海量数据表数据集GridData</returns>
        </member>
        <member name="M:JFramework.Core.Data.RuleObject`2.GetGridDataByPage(System.Int32,System.Int32,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            分页读取海量数据表数据集 [实体]
            </summary>
            <param name="pageSize">页面大小</param>
            <param name="currentPageIndex">当前页索引</param>
            <param name="descFlag">按逆序输出还是正序输出</param>
            <param name="predicate">检索条件</param>
            <param name="isDateTimeFlag">是否是时间字段</param>
            <returns>海量数据表数据集GridData</returns>
        </member>
        <member name="M:JFramework.Core.Data.RuleObject`2.GetGridDataByPage(System.Int32,System.Int32,System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            分页读取海量数据表数据集 [实体]
            </summary>
            <param name="pageSize">页面大小</param>
            <param name="currentPageIndex">当前页索引</param>
            <param name="dataKeyCode">数据主键代码</param>
            <param name="descFlag">按逆序输出还是正序输出</param>
            <param name="predicate">检索条件</param>
            <param name="isDateTimeFlag">是否是时间字段</param>
            <returns>海量数据表数据集GridData</returns>
        </member>
        <member name="M:JFramework.Core.Data.RuleObject`2.GetGridDataByPage(System.Int32,System.Int32,System.Boolean,JFramework.Core.Data.DbExecuteInfo,System.Boolean)">
            <summary>
            分页读取海量数据表数据集 [实体]
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="pageSize">页面大小</param>
            <param name="currentPageIndex">当前页索引</param>
            <param name="descFlag">按逆序输出还是正序输出</param>
            <param name="dbExecuteInfo">检索条件</param>
            <param name="isDateTimeFlag">是否是时间字段</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.RuleObject`2.GetGridDataByPage(System.Int32,System.Int32,System.String,System.Boolean,JFramework.Core.Data.DbExecuteInfo,System.Boolean)">
            <summary>
            分页读取海量数据表数据集 [实体]
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="pageSize">页面大小</param>
            <param name="dataKeyCode">数据主键代码</param>
            <param name="currentPageIndex">当前页索引</param>
            <param name="descFlag">按逆序输出还是正序输出</param>
            <param name="dbExecuteInfo">检索条件</param>
            <param name="isDateTimeFlag">是否是时间字段</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.RuleObject`2.GetMaxID">
            <summary>
            获取最大唯一标识
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.RuleObject`2.GetScalarStr(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            读取单元格值字符串规则
            </summary>
            <param name="dataTableCode">数据表代码</param>
            <param name="fieldCode">字段代码</param>
            <param name="searchCondition">检索条件</param>
            <param name="startSplitChar">起始分隔符</param>
            <param name="endSplitChar">结束分隔符</param>
            <returns>单元格值数据集[IDataReader]</returns>
        </member>
        <member name="M:JFramework.Core.Data.RuleObject`2.Insert(`0,System.Boolean,System.Int32)">
            <summary>
            新增数据
            </summary>
            <param name="entity"></param>
            <param name="isCache"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.RuleObject`2.Update(`0)">
            <summary>
            将实体数据修改到数据库[主键]
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.RuleObject`2.Update(`0,System.String)">
            <summary>
            将实体数据修改到数据库[带条件]
            </summary>
            <param name="entity"></param>
            <param name="searchCondition"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Data.RuleObject`2.Update(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            将实体数据修改到数据库[lambda]
            </summary>
            <param name="entity"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="P:JFramework.Core.Data.RuleObject`2.Instance">
            <summary>
            实例化对象
            </summary>
        </member>
        <member name="T:JFramework.Core.Data.SqlActionCode">
            <summary>
            数据库操作类型
            </summary>
        </member>
        <member name="F:JFramework.Core.Data.SqlActionCode.INSERT">
            <summary>
            新增
            </summary>
        </member>
        <member name="F:JFramework.Core.Data.SqlActionCode.UPDATE">
            <summary>
            修改
            </summary>
        </member>
        <member name="F:JFramework.Core.Data.SqlActionCode.DELETE">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:JFramework.Core.Data.SqlActionCode.SELECT">
            <summary>
            查询
            </summary>
        </member>
        <member name="T:JFramework.Core.Data.TransactionCleaner">
            <summary>
            事务超时处理
            </summary>
        </member>
        <member name="E:JFramework.Core.Data.TransactionCleaner.Timeout">
            <summary>
            超时事件
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.TransactionCleaner._timer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            超时处理
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JFramework.Core.Data.TransactionCleaner.Init(System.Double)">
            <summary>
            初始化
            </summary>
            <param name="activeTime"></param>
        </member>
        <member name="M:JFramework.Core.Data.TransactionCleaner.OnTimeout">
            <summary>
            超时处理
            </summary>
        </member>
        <member name="M:JFramework.Core.Data.TransactionCleaner.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="T:JFramework.Core.Data.TransactionCleaner.TimeoutHandler">
            <summary>
            超时
            </summary>
        </member>
        <member name="T:JFramework.Core.Exceptions.Data.CommandException">
            <summary>
            执行数据库操作发生异常
            </summary>
        </member>
        <member name="T:JFramework.Core.Exceptions.Data.ConnectionException">
            <summary>
            数据库连接异常
            </summary>
        </member>
        <member name="M:JFramework.Core.Exceptions.Data.ConnectionException.ToString">
            <summary>
            当前的异常消息
            </summary>
            <returns></returns>
        </member>
        <member name="P:JFramework.Core.Exceptions.Data.ConnectionException.Text">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="T:JFramework.Core.Helper.AreaIPRange">
            <summary>
            地区的IP范围信息
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.AreaIPRange.ProvinceName">
            <summary>
            省份/自治区名
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.AreaIPRange.CityName">
            <summary>
            市/县名
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.AreaIPRange.IPStart">
            <summary>
            IP开始值
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.AreaIPRange.IPEnd">
            <summary>
            IP结束值
            </summary>
        </member>
        <member name="T:JFramework.Core.Helper.IPData">
            <summary>
            IP数据
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.IPData.AllIPRange">
            <summary>
            按IPStart升序排列好的范围列表
            </summary>
        </member>
        <member name="T:JFramework.Core.Helper.IPHelper">
            <summary>
            IP工具类
            </summary>
        </member>
        <member name="M:JFramework.Core.Helper.IPHelper.IPStrToLong(System.String)">
            <summary>
            将IP字符串表达式,转为长整型IP数值
            </summary>
            <param name="ipStr"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Helper.IPHelper.GetAreaIPRange(System.String,System.String@,System.String@)">
            <summary>
            根据IP获取地区信息
            </summary>
            <param name="ipStr"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Helper.IPHelper.ChkAreaIPRange(JFramework.Core.Helper.AreaIPRange,System.Int64,System.String@,System.String@)">
            <summary>
            检测IP是否符合地区IP范围
            </summary>
            <param name="areaIPRange"></param>
            <param name="ipLong"></param>
            <param name="provinceName"></param>
            <param name="cityName"></param>
            <returns></returns>
        </member>
        <member name="F:JFramework.Core.Helper.RegexHelper.AccountPattern">
            <summary>
            匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.RegexHelper.Base64Pattern">
            <summary>
            base64字符串
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.RegexHelper.BeginEndBlankPattern">
            <summary>
            匹配首尾空白字符的正则表达式
            可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.RegexHelper.BlankLinePattern">
            <summary>
            匹配空白行的正则表达式
            可以用来删除空白行
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.RegexHelper.ChineseIdentityNoPattern">
            <summary>
            匹配中国身份证
            中国的身份证为15位或18位
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.RegexHelper.ChineseTelephonePattern">
            <summary>
            匹配国内电话号码(包含区号)
            匹配形式如="XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX"
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.RegexHelper.ChineseZipcodePattern">
            <summary>
            匹配中国邮政编码
            中国邮政编码为6位数字
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.RegexHelper.DatePattern">
            <summary>
            匹配日期正则表达式
            正则表达式拼接而成，瑞年二月判断、非闰年二月判断、其它月份判断，日期格式可以为YYYY-MM-DD、YYYY/MM/DD、YYYY_MM_DD、YYYY.MM.DD
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.RegexHelper.DateTimePattern">
            <summary>
            匹配日期加日期正则表达式
            正则表达式拼接而成，瑞年二月判断、非闰年二月判断、其它月份判断，格式为YYYY-MM-DD 15:00:00
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.RegexHelper.EmailPattern">
            <summary>
            匹配Email地址的正则表达式
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.RegexHelper.HanZiPattern">
            <summary>
            匹配汉字
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.RegexHelper.HtmlTagPattern">
            <summary>
            匹配HTML标记的正则表达式
            也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.RegexHelper.IntegerPattern">
            <summary>
            匹配整型字符正则表达式
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.RegexHelper.IPPattern">
            <summary>
            匹配IP地址
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.RegexHelper.LetterOrNumberPattern">
            <summary>
            匹配字符串为A-Z、0-9及下划线以内的字符正则表达式
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.RegexHelper.MobilePhonePattern">
            <summary>
            匹配手机号
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.RegexHelper.NickNamePattern">
            <summary>
            匹配字符串为汉字、A-Z、0-9及下划线以内的字符正则表达式
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.RegexHelper.QQNoPattern">
            <summary>
            匹配腾讯QQ号
            腾讯QQ号从10000开始
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.RegexHelper.SafeSqlStrPattern">
            <summary>
            匹配Sql危险字符
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.RegexHelper.SafeUserInfoStrPattern">
            <summary>
            匹配有危险的可能用于链接的字符串
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.RegexHelper.TimePattern">
            <summary>
            匹配时间正则表达式，时间格式：15:00:00
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.RegexHelper.UnicodeCharacterPattern">
            <summary>
            匹配双字节字符(包括汉字在内)/匹配中文字符的正则表达式
            可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1)
            </summary>
        </member>
        <member name="F:JFramework.Core.Helper.RegexHelper.UrlPattern">
            <summary>
            匹配网址URL的正则表达式
            相对很完美的版本 它验证的情况包括:协议、IP、域名、二级域名，域名中的文件、端口
            </summary>
        </member>
        <member name="M:JFramework.Core.Helper.RegexHelper.ClearBracketTag(System.String)">
            <summary>
            清除方括号标签
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Helper.RegexHelper.ClearBracketTagContent(System.String)">
            <summary>
            清除方括号标签及内容
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Helper.RegexHelper.ClearHtmlTag(System.String)">
            <summary>
            清除HTML标签
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Helper.RegexHelper.ClearHtmlTagContent(System.String)">
            <summary>
            清除HTML标签及内容
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Helper.RegexHelper.FormatNum(System.String)">
            <summary>
            返回字符串中的数字
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Helper.RegexHelper.FormatPhone(System.String)">
            <summary>
            隐藏手机号码中的几位
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Helper.RegexHelper.IsChineseIdentityNo(System.String)">
            <summary>
            是否匹配中国身份证
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Helper.RegexHelper.IsChineseTelephone(System.String)">
            <summary>
            是否匹配国内电话号码(包含区号)
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Helper.RegexHelper.IsChineseZipcode(System.String)">
            <summary>
            是否匹配中国邮政编码
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Helper.RegexHelper.IsDate(System.String)">
            <summary>
            是否匹配日期
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Helper.RegexHelper.IsDateTime(System.String)">
            <summary>
            是否为日期加时间
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Helper.RegexHelper.IsEmail(System.String)">
            <summary>
            是否匹配Email地址的正则表达式
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Helper.RegexHelper.IsHanZi(System.String)">
            <summary>
            是否匹配汉字
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Helper.RegexHelper.IsInteger(System.String)">
            <summary>
            是否匹配整型字符正则表达式
            </summary>
            <param name="input">待匹配字符串</param>
            <returns>是否匹配</returns>
        </member>
        <member name="M:JFramework.Core.Helper.RegexHelper.IsIP(System.String)">
            <summary>
            是否匹配IP地址
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Helper.RegexHelper.IsLetterOrNumber(System.String)">
            <summary>
            是否匹配字符串为A-Z、0-9及下划线以内的字符正则表达式
            </summary>
            <param name="input">待匹配字符串</param>
            <returns>是否匹配</returns>
        </member>
        <member name="M:JFramework.Core.Helper.RegexHelper.IsMatch(System.String,System.String)">
            <summary>
            是否匹配
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Helper.RegexHelper.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            是否匹配
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Helper.RegexHelper.IsMobilePhone(System.String)">
            <summary>
            是否匹配手机号码
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Helper.RegexHelper.IsQQNo(System.String)">
            <summary>
            是否匹配腾讯QQ号
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Helper.RegexHelper.IsTime(System.String)">
            <summary>
            是否匹配时间
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Helper.RegexHelper.IsUnicodeCharacter(System.String)">
            <summary>
            是否匹配双字节字符(包括汉字在内)或匹配中文字符的正则表达式
            </summary>
            <param name="input">待匹配字符串</param>
            <returns>是否匹配</returns>
        </member>
        <member name="M:JFramework.Core.Helper.RegexHelper.IsUrl(System.String)">
            <summary>
            是否匹配网址URL的正则表达式
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:JFramework.Core.Log.LoggerHelper">
            <summary>
            日志类
            </summary>
        </member>
        <member name="M:JFramework.Core.Log.LoggerHelper.OutDebug(System.Object,System.Exception)">
            <summary>
            调试信息
            </summary>
            <param name="message">描述信息</param>
            <param name="exception">异常信息</param>
        </member>
        <member name="M:JFramework.Core.Log.LoggerHelper.OutError(System.Object,System.Exception)">
            <summary>
            一般错误
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:JFramework.Core.Log.LoggerHelper.OutFatal(System.Object,System.Exception)">
            <summary>
            致命错误
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:JFramework.Core.Log.LoggerHelper.OutInfo(System.Object,System.Exception)">
            <summary>
            一般信息
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:JFramework.Core.Log.LoggerHelper.OutWarn(System.Object,System.Exception)">
            <summary>
            警告
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:JFramework.Core.Log.LoggerHelper.WriteDebug(System.Object,System.Exception)">
            <summary>
            调试信息
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:JFramework.Core.Log.LoggerHelper.WriteError(System.Object,System.Exception)">
            <summary>
            一般错误
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:JFramework.Core.Log.LoggerHelper.WriteFatal(System.Object,System.Exception)">
            <summary>
            致命错误
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:JFramework.Core.Log.LoggerHelper.WriteInfo(System.Object,System.Exception)">
            <summary>
            一般信息
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:JFramework.Core.Log.LoggerHelper.WriteWarn(System.Object,System.Exception)">
            <summary>
            警告
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="T:JFramework.Core.Util.Security.BigInteger">
            <summary>
            
            </summary>
        </member>
        <member name="T:JFramework.Core.Util.Security.CBlowFish">
            <summary>
            c++的Blowfish翻译版
            </summary>
        </member>
        <member name="T:JFramework.Core.Util.Security.CBlowFish.SBlock">
            <summary>
            Block Structure
            </summary>
        </member>
        <member name="F:JFramework.Core.Util.Security.CBlowFish.SBlock.m_uil">
            <summary>
            
            </summary>
        </member>
        <member name="F:JFramework.Core.Util.Security.CBlowFish.SBlock.m_uir">
            <summary>
            
            </summary>
        </member>
        <member name="M:JFramework.Core.Util.Security.CBlowFish.SBlock.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Constructors
            </summary>
            <param name="l"></param>
            <param name="r"></param>
        </member>
        <member name="M:JFramework.Core.Util.Security.CBlowFish.SBlock.#ctor(JFramework.Core.Util.Security.CBlowFish.SBlock@)">
            <summary>
            Copy Constructor
            </summary>
            <param name="roBlock"></param>
        </member>
        <member name="M:JFramework.Core.Util.Security.CBlowFish.SBlock.op_ExclusiveOr(JFramework.Core.Util.Security.CBlowFish.SBlock,JFramework.Core.Util.Security.CBlowFish.SBlock)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:JFramework.Core.Util.Security.CBlowFish.EnType">
            <summary>
            
            </summary>
        </member>
        <member name="F:JFramework.Core.Util.Security.CBlowFish.EnType.ECB">
            <summary>
            
            </summary>
        </member>
        <member name="F:JFramework.Core.Util.Security.CBlowFish.EnType.CBC">
            <summary>
            
            </summary>
        </member>
        <member name="F:JFramework.Core.Util.Security.CBlowFish.EnType.CFB">
            <summary>
            
            </summary>
        </member>
        <member name="M:JFramework.Core.Util.Security.CBlowFish.Byte(System.UInt32)">
            <summary>
            取低位
            </summary>
            <param name="ui"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.Security.CBlowFish.Encrypt(JFramework.Core.Util.Security.CBlowFish.SBlock@)">
            <summary>
            Sixteen Round Encipher of Block
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:JFramework.Core.Util.Security.CBlowFish.Decrypt(JFramework.Core.Util.Security.CBlowFish.SBlock@)">
            <summary>
            Sixteen Round Decipher of SBlock
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:JFramework.Core.Util.Security.CBlowFish.#ctor(System.Byte[],System.Int32,JFramework.Core.Util.Security.CBlowFish.SBlock@)">
            <summary>
            Initialize the P and S boxes for a given Key
            </summary>
            <param name="ucKey"></param>
            <param name="keysize">1~56</param>
            <param name="roChain"></param>
        </member>
        <member name="M:JFramework.Core.Util.Security.CBlowFish.ResetChain">
            <summary>
            Resetting the chaining block
            </summary>
        </member>
        <member name="M:JFramework.Core.Util.Security.CBlowFish.Encrypt(System.Byte[],System.UInt32,JFramework.Core.Util.Security.CBlowFish.EnType)">
            <summary>
            Encrypt Buffer in Place
            Returns false if n is multiple of 8
            </summary>
            <param name="buf"></param>
            <param name="n">大于0并且是8的倍数</param>
            <param name="iMode"></param>
        </member>
        <member name="M:JFramework.Core.Util.Security.CBlowFish.Decrypt(System.Byte[],System.UInt32,JFramework.Core.Util.Security.CBlowFish.EnType)">
            <summary>
            Decrypt Buffer in Place
            Returns false if n is multiple of 8
            </summary>
            <param name="buf"></param>
            <param name="n">大于0并且是8的倍数</param>
            <param name="iMode"></param>
        </member>
        <member name="M:JFramework.Core.Util.Security.CBlowFish.Encrypt(System.Byte[],System.Byte[],System.Int32,JFramework.Core.Util.Security.CBlowFish.EnType)">
            <summary>
            Encrypt from Input Buffer to Output Buffer
            Returns false if n is multiple of 8
            </summary>
            <param name="inBytes"></param>
            <param name="outBytes"></param>
            <param name="n"></param>
            <param name="iMode"></param>
        </member>
        <member name="M:JFramework.Core.Util.Security.CBlowFish.Decrypt(System.Byte[],System.Byte[],System.UInt32,JFramework.Core.Util.Security.CBlowFish.EnType)">
            <summary>
            Decrypt from Input Buffer to Output Buffer
            Returns false if n is multiple of 8
            </summary>
            <param name="inBytes"></param>
            <param name="outBytes"></param>
            <param name="n"></param>
            <param name="iMode"></param>
        </member>
        <member name="M:JFramework.Core.Util.Security.CBlowFish.EncryptFromString(System.String,System.String)">
            <summary>
            把字符串加密,输出字符串 默认编码为 gb2312
            </summary>
            <param name="inpStr"></param>
            <param name="keyStr"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.Security.CBlowFish.EncryptFromString(System.String,System.String,System.Text.Encoding)">
            <summary>
            把字符串加密,输出字符串
            </summary>
            <param name="inpStr"></param>
            <param name="keyStr"></param>
            <param name="_encoding"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.Security.CBlowFish.DecryptFromString(System.String,System.String)">
            <summary>
            把字符串加密,输出字符串 默认编码为 gb2312
            </summary>
            <param name="inpStr"></param>
            <param name="keyStr"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.Security.CBlowFish.DecryptFromString(System.String,System.String,System.Text.Encoding)">
            <summary>
            把字符串加密,输出字符串
            </summary>
            <param name="inpStr"></param>
            <param name="keyStr"></param>
            <param name="_encoding"></param>
            <returns></returns>
        </member>
        <member name="T:JFramework.Core.Util.Security.DES">
            <summary>
            des加密
            </summary>
        </member>
        <member name="M:JFramework.Core.Util.Security.DES.Encrypt(System.String,System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="encryptString">待加密的字符串</param>
            <param name="encryptKey">加密密钥,要求为8位</param>
            <returns>加密成功返回加密后的字符串,失败返回源串</returns>
        </member>
        <member name="M:JFramework.Core.Util.Security.DES.Decrypt(System.String,System.String)">
            <summary>
            DES解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="decryptKey">解密密钥,要求为8位,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串,失败返源串</returns>
        </member>
        <member name="M:JFramework.Core.Util.Security.DES.GetSubString(System.String,System.Int32,System.String)">
            <summary>
            字符串如果操过指定长度则将超出的部分用指定字符串代替
            </summary>
            <param name="p_SrcString">要检查的字符串</param>
            <param name="p_Length">指定长度</param>
            <param name="p_TailString">用于替换的字符串</param>
            <returns>截取后的字符串</returns>
        </member>
        <member name="M:JFramework.Core.Util.Security.DES.GetSubString(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            取指定长度的字符串
            </summary>
            <param name="p_SrcString">要检查的字符串</param>
            <param name="p_StartIndex">起始位置</param>
            <param name="p_Length">指定长度</param>
            <param name="p_TailString">用于替换的字符串</param>
            <returns>截取后的字符串</returns>
        </member>
        <member name="T:JFramework.Core.Util.Security.RSA">
            <summary>
            RSA
            </summary>
        </member>
        <member name="M:JFramework.Core.Util.Security.RSA.CreateRSAKey">
            <summary>
            创建RSAKey
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.Security.RSA.DecryptPrivateKey(System.String,System.String)">
            <summary>
            私钥解密
            </summary>
            <param name="privateKey"></param>
            <param name="dataStr"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.Security.RSA.DecryptPublicKey(System.String,System.String)">
            <summary>
            公钥解密
            </summary>
            <param name="publicKey"></param>
            <param name="dataStr"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.Security.RSA.EncryptPublicKey(System.String,System.String)">
            <summary>
            公钥加密
            </summary>
            <param name="publicKey"></param>
            <param name="dataStr"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.Security.RSA.EncryptPrivateKey(System.String,System.String)">
            <summary>
            私钥加密
            </summary>
            <param name="privateKey"></param>
            <param name="dataStr"></param>
            <returns></returns>
        </member>
        <member name="T:JFramework.Core.Util.Security.RSAKey">
            <summary>
            RSAKey
            </summary>
        </member>
        <member name="P:JFramework.Core.Util.Security.RSAKey.PrivateKey">
            <summary>
            私钥
            </summary>
        </member>
        <member name="P:JFramework.Core.Util.Security.RSAKey.PublicKey">
            <summary>
            共钥
            </summary>
        </member>
        <member name="T:JFramework.Core.Util.Security.TripleDES">
            <summary>
            3des
            </summary>
        </member>
        <member name="M:JFramework.Core.Util.Security.TripleDES.Decrypt(System.String,System.Byte[])">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="valBytes"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.Security.TripleDES.Decrypt(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="encryptedValue"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.Security.TripleDES.Encrypt(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="encryptValue"></param>
            <returns></returns>
        </member>
        <member name="T:JFramework.Core.Util.File.FileWatcher">
            <summary>
            文件监控
            </summary>
        </member>
        <member name="F:JFramework.Core.Util.File.FileWatcher._Timer">
            <summary>
            定时器
            </summary>
        </member>
        <member name="F:JFramework.Core.Util.File.FileWatcher.TimeoutMillis">
            <summary>
            响应时间
            </summary>
        </member>
        <member name="E:JFramework.Core.Util.File.FileWatcher.FileChange">
            <summary>
            文件变更回调事件
            </summary>
        </member>
        <member name="M:JFramework.Core.Util.File.FileWatcher.ConfigureAndWatchHandler_OnChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            文件内容发生变动时的处理事件
            </summary>
            <param name="source"></param>
            <param name="e"></param>
        </member>
        <member name="M:JFramework.Core.Util.File.FileWatcher.ConfigureAndWatchHandler_OnRenamed(System.Object,System.IO.RenamedEventArgs)">
            <summary>
            文件被重命名时的处理事件
            </summary>
            <param name="source"></param>
            <param name="e"></param>
        </member>
        <member name="M:JFramework.Core.Util.File.FileWatcher.OnWatchedFileChange(System.Object)">
            <summary>
            配置文件发生变动
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:JFramework.Core.Util.File.FileWatcher.StartWatching(System.IO.FileInfo,JFramework.Core.Util.File.FileWatcher.FileChangeHandler)">
            <summary>
            开始侦听
            </summary>
            <param name="configFile">侦听文件</param>
            <param name="callback">回调函数</param>
        </member>
        <member name="T:JFramework.Core.Util.File.FileWatcher.FileChangeHandler">
            <summary>
            文件变更事件
            </summary>
        </member>
        <member name="M:JFramework.Core.Util.SerializationHelper.DeSerialize``1(System.IO.FileStream)">
            <summary>
            将文件流反序列为对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileStream"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.SerializationHelper.DeSerialize``1(System.String)">
            <summary>
            将字符串反序列为对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.SerializationHelper.DeSerialize``1(System.String,System.Text.Encoding)">
            <summary>
            将字符串反序列为对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s"></param>
            <param name="encoding">编码类型</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.SerializationHelper.GetSerializer(System.Type)">
            <summary>
            将对象序列化至XML文档
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.SerializationHelper.JsonDeSerialize``1(System.String)">
            <summary>
            将JSON字符串反序列为对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.SerializationHelper.JsonSerialize(System.Object)">
            <summary>
            将对象序列化成JSON字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.SerializationHelper.Load(System.Type,System.String)">
            <summary>
            反序列化
            </summary>
            <param name="type">对象类型</param>
            <param name="filename">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.SerializationHelper.Save(System.Object,System.String)">
            <summary>
            序列化
            </summary>
            <param name="obj">对象</param>
            <param name="filename">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.SerializationHelper.Serialize(System.Object)">
            <summary>
            将对象序列化成字符串
            </summary>
            <param name="obj">对象</param>
            <returns>xml字符串</returns>
        </member>
        <member name="M:JFramework.Core.Util.SerializationHelper.Serialize(System.Object,System.Text.Encoding)">
            <summary>
            将对象序列化成字符串
            </summary>
            <param name="obj">对象</param>
            <param name="encoding">编码类型</param>
            <returns>xml字符串</returns>
        </member>
        <member name="T:JFramework.Core.Util.StringHelper">
            <summary>
            字符串工具类
            </summary>
        </member>
        <member name="M:JFramework.Core.Util.StringHelper.GenerateGuid">
            <summary>
            生成有序的GUID
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.StringHelper.IsNumeric(System.String)">
            <summary>
            判断对象是否为Int32类型的数字
            </summary>
            <param name="expression">要判断的对象</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.StringHelper.IsNumericArray(System.String[])">
            <summary>
            判断给定的字符串数组(strNumber)中的数据是不是都为数值型
            </summary>
            <param name="strNumber">要确认的字符串数组</param>
            <returns>是则返加true 不是则返回 false</returns>
        </member>
        <member name="M:JFramework.Core.Util.StringHelper.Join(System.String,System.Collections.IEnumerable)">
            <summary>
            将数据用指定分割符连接成相应的字符串
            </summary>
            <param name="separator">分割符</param>
            <param name="objects">数据</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.StringHelper.MergeString(System.String,System.String)">
            <summary>
            合并字符串
            </summary>
            <param name="source">要合并的源字符串</param>
            <param name="target">要被合并到的目的字符串</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.StringHelper.MergeString(System.String,System.String,System.String)">
            <summary>
            合并字符串
            </summary>
            <param name="source">要合并的源字符串</param>
            <param name="target">要被合并到的目的字符串</param>
            <param name="mergechar">合并符</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.StringHelper.Repeat(System.String,System.Int32)">
            <summary>
            重复指定字符串指定次数
            </summary>
            <param name="str">欲重复的字符串</param>
            <param name="times">重复次数</param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.StringHelper.Replace(System.String,System.String,System.String)">
            <summary>
            替换字符串
            </summary>
            <param name="template"></param>
            <param name="placeholder"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.StringHelper.Replace(System.String,System.String,System.String,System.Boolean)">
            <summary>
            替换字符串
            </summary>
            <param name="template"></param>
            <param name="placeholder"></param>
            <param name="replacement"></param>
            <param name="wholeWords"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.StringHelper.SplitString(System.String,System.String)">
            <summary>
            分割字符串
            </summary>
            <param name="strContent"></param>
            <param name="strSplit"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.StringHelper.SplitString(System.String,System.String,System.Int32)">
            <summary>
            分割字符串
            </summary>
            <param name="strContent"></param>
            <param name="strSplit"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.StringHelper.StringToIntArray(System.String,System.Int32)">
            <summary>
            字符串转成整型数组
            </summary>
            <param name="idList">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="T:JFramework.Core.Util.SystemInfo">
            <summary>
            信息系统辅助类
            </summary>
        </member>
        <member name="M:JFramework.Core.Util.SystemInfo.AssemblyFileName(System.Reflection.Assembly)">
            <summary>
            获取指定程序集文件名称
            </summary>
            <param name="myAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.SystemInfo.AssemblyLocationInfo(System.Reflection.Assembly)">
            <summary>
            获取指定程序集的装配位置的路径
            </summary>
            <param name="myAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.SystemInfo.AssemblyQualifiedName(System.Type)">
            <summary>
            获取指定类型完整名称
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.SystemInfo.AssemblyShortName(System.Reflection.Assembly)">
            <summary>
            获取指定程序简短名称
            </summary>
            <param name="myAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.SystemInfo.CreateCaseInsensitiveHashtable">
            <summary>
            创建 System.Collections.Hashtable 类具有默认初始容量的不区分大小写的新实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Util.SystemInfo.NewGuid">
            <summary>
            生成一个新的GUID
            </summary>
            <returns></returns>
        </member>
        <member name="P:JFramework.Core.Util.SystemInfo.ApplicationBaseDirectory">
            <summary>
            获取本程序的根目录
            </summary>
        </member>
        <member name="P:JFramework.Core.Util.SystemInfo.ConfigurationFileLocation">
            <summary>
            获取当前配置文件的路径
            </summary>
        </member>
        <member name="P:JFramework.Core.Util.SystemInfo.CurrentThreadId">
            <summary>
            当前线程标识符
            </summary>
        </member>
        <member name="P:JFramework.Core.Util.SystemInfo.EntryAssemblyLocation">
            <summary>
            获取该文件的路径
            </summary>
        </member>
        <member name="P:JFramework.Core.Util.SystemInfo.HostName">
            <summary>
            获取当前机器的主机名或计算机名
            </summary>
        </member>
        <member name="P:JFramework.Core.Util.SystemInfo.NewLine">
            <summary>
            获取系统的换行符
            </summary>
        </member>
        <member name="P:JFramework.Core.Util.SystemInfo.ProcessStartTime">
            <summary>
            获取当前进程的开始时间
            </summary>
        </member>
        <member name="T:JFramework.Core.Util.SysVariable">
            <summary>
            系统变量
            </summary>
        </member>
        <member name="P:JFramework.Core.Util.SysVariable.CurrentContext">
            <summary>
            当前上下文属性
            </summary>
        </member>
        <member name="P:JFramework.Core.Util.SysVariable.MaxRowsNum">
            <summary>
            数据实体最大数量
            </summary>
        </member>
        <member name="P:JFramework.Core.Util.SysVariable.UserHostAddress">
            <summary>
            远程客户主机端的IP主机地址属性 [如：61.234.224.224]
            </summary>
        </member>
        <member name="T:JFramework.Core.Text.ByteBuilder">
            <summary>
            可变字节数组类
            </summary>
        </member>
        <member name="M:JFramework.Core.Text.ByteBuilder.#ctor(JFramework.Core.Text.CodecType)">
            <summary>
            构造函数
            </summary>
            <param name="codecType">默认为UTF8</param>
        </member>
        <member name="M:JFramework.Core.Text.ByteBuilder.Add(System.Char)">
            <summary>
            增加字符
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:JFramework.Core.Text.ByteBuilder.Add(System.Byte[])">
            <summary>
            增加字节数组
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:JFramework.Core.Text.ByteBuilder.Add(System.String)">
            <summary>
            增加字符串
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:JFramework.Core.Text.ByteBuilder.Insert(System.Int32,System.Byte[])">
            <summary>
            指定位置插入字节
            </summary>
            <param name="index">索引</param>
            <param name="source">源</param>
        </member>
        <member name="M:JFramework.Core.Text.ByteBuilder.ToBytes">
            <summary>
            转换为结果字节数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:JFramework.Core.Text.ByteBuilder.ToHexString">
            <summary>
            转换为十六进制的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:JFramework.Core.Text.ByteBuilder.CurCodecType">
            <summary>
            编码类型
            </summary>
        </member>
        <member name="T:JFramework.Core.Text.CodecType">
            <summary>
            编解码类型
            </summary>
        </member>
    </members>
</doc>
